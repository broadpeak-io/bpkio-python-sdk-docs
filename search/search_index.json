{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bpkio-python-sdk","text":"<p>Welcome to the documentation for the broadpeak.io Python SDK. This SDK provides a convenient way to interact with the broadpeak.io REST APIs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Near-complete support for broadpeak.io REST APIs</li> <li>Type hints and validation using Pydantic</li> <li>Convenience methods for common tasks that usually require multiple API calls</li> <li>Comprehensive logging</li> <li>Caching support</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>API Reference</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For support, please contact support@broadpeak.tv or open an issue on GitHub. </p>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed documentation for all the classes and methods available in the broadpeak.io Python SDK.</p>"},{"location":"api/client/","title":"Client Reference","text":""},{"location":"api/client/#broadpeakioapi","title":"BroadpeakIoApi","text":"<p>The main client class that provides access to all API functionality.</p> <p>You can import it from the <code>bpkio_api</code> module.</p> <pre><code>from bpkio_api import BroadpeakIoApi\n</code></pre>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi","title":"bpkio_api.api.BroadpeakIoApi","text":"<pre><code>BroadpeakIoApi(\n    *,\n    tenant: Optional[str] = None,\n    api_key: Optional[str] = None,\n    fqdn: str = DEFAULT_FQDN,\n    use_cache: bool = True,\n    session_file: Optional[str] = None,\n    **kwargs\n)\n</code></pre> <p>You can specify either a tenant label or an API key. If you specify a tenant label, the API key will be retrieved from the <code>~/.bpkio/tenant</code> file.</p> <p>If you don't specify either, the SDK will use environment variables <code>BPKIO_TENANT</code> or <code>BPKIO_API_KEY</code>. If those are not set, the SDK will check whether there is a default tenant configured in the <code>~/.bpkio/tenant</code> file.</p> <p>See the Authentication guide for more information.</p> <p>Parameters:</p> Name Type Description Default <code>tenant</code> <code>Optional[str]</code> <p>The label of the Tenant Profile to use (from the <code>~/.bpkio/tenant</code> file).</p> <code>None</code> <code>api_key</code> <code>Optional[str]</code> <p>The tenant's API key.</p> <code>None</code> <code>fqdn</code> <code>str</code> <p>The FQDN of the Broadpeak.io entrypoint to use.</p> <code>DEFAULT_FQDN</code> <code>use_cache</code> <code>bool</code> <p>Whether to use the cache.</p> <code>True</code> <code>session_file</code> <code>Optional[str]</code> <p>The file to record the session to.</p> <code>None</code>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi-attributes","title":"Attributes","text":""},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.fqdn","title":"fqdn","text":"<pre><code>fqdn\n</code></pre> <p>Get the FQDN of the Broadpeak.io entrypoint</p>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi-functions","title":"Functions","text":""},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.get_tenant_id","title":"get_tenant_id","text":"<pre><code>get_tenant_id() -&gt; int\n</code></pre> <p>Returns the tenant ID from the API Key</p>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.get_self_tenant","title":"get_self_tenant","text":"<pre><code>get_self_tenant() -&gt; Tenant\n</code></pre> <p>Returns the Tenant resource linked to the current API Key</p>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.test_access","title":"test_access","text":"<pre><code>test_access() -&gt; bool\n</code></pre> <p>Tests if the API key allows to access the API</p>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.parse_api_key","title":"parse_api_key","text":"<pre><code>parse_api_key() -&gt; dict\n</code></pre> <p>Parses the API Key and extracts the information it contains</p>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.is_valid_api_key_format","title":"is_valid_api_key_format","text":"<pre><code>is_valid_api_key_format(string: str)\n</code></pre> <p>Checks if the API Key is in the format expected by broadpeak.io</p>"},{"location":"api/client/#bpkio_api.api.BroadpeakIoApi.is_correct_entrypoint","title":"is_correct_entrypoint","text":"<pre><code>is_correct_entrypoint(url: str, api_key: str, verify_ssl) -&gt; bool | str\n</code></pre> <p>Checks whether a URL is a valid Broadpeak.io entrypoint</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to check.</p> required <code>api_key</code> <code>str</code> <p>The API key to use.</p> required <code>verify_ssl</code> <p>Whether to verify the SSL certificate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool | str</code> <p>True if the URL is a valid Broadpeak.io entrypoint, False otherwise.</p>"},{"location":"api/endpoints/","title":"Endpoints Overview","text":"<p>The broadpeak.io Python SDK provides access to various API endpoints through dedicated endpoint classes. Each endpoint class handles specific API functionality and is accessible through the main <code>BroadpeakIoApi</code> client.</p>"},{"location":"api/endpoints/#available-endpoints","title":"Available Endpoints","text":"<ul> <li>Sources API</li> <li>Services API</li> <li>Categories API</li> <li>Transcoding Profiles API</li> <li>Users API</li> <li>Tenants API</li> <li>Consumption API</li> </ul>"},{"location":"api/endpoints/categories/","title":"Categories API","text":"<p>The Categories API provides functionality to manage categories in the broadpeak.io platform. Categories help organize and group content.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi","title":"bpkio_api.endpoints.categories.CategoriesApi","text":"<pre><code>CategoriesApi(base_url: str = '', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>API client for managing categories in the broadpeak.io platform.</p> <p>This class provides methods to create, retrieve, update, and delete categories, as well as list and search through existing categories.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL for the API endpoints.</p> <code>''</code> <code>**kwargs</code> <p>Additional configuration options passed to the consumer.</p> <code>{}</code> <p>Methods:</p> Name Description <code>count</code> <p>Get a count of all categories</p> <code>_get_page</code> <p>Get a paginated list of categories.</p> <code>retrieve</code> <p>Get a single category by its ID.</p> <code>create</code> <p>Create a new category.</p> <code>update</code> <p>Update an existing category.</p> <code>delete</code> <p>Delete a category by its ID.</p> <code>list</code> <p>Get the complete list of categories.</p> <code>search</code> <p>Search for categories matching specific criteria.</p> <code>upsert</code> <p>Create, retrieve, or update a category based on existence.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Get a count of all categories</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi._get_page","title":"_get_page","text":"<pre><code>_get_page(offset: Query = 0, limit: Query = 5) -&gt; List[Category]\n</code></pre> <p>Get a paginated list of categories.</p> <p>This method corresponds to the <code>GET /categories</code> endpoint of the broadpeak.io API.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Number of items to skip before starting to collect results.</p> <code>0</code> <code>limit</code> <code>int</code> <p>Maximum number of items to return in a single page.</p> <code>5</code> <p>Returns:</p> Type Description <code>List[Category]</code> <p>A list of Category objects for the requested page.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(category_id: int) -&gt; Optional[Category]\n</code></pre> <p>Get a single category by its ID.</p> <p>This method corresponds to the <code>GET /categories/{category_id}</code> endpoint of the broadpeak.io API.</p> <p>Parameters:</p> Name Type Description Default <code>category_id</code> <code>int</code> <p>Unique identifier of the category to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[Category]</code> <p>Optional[Category]: The requested Category object if found, None otherwise.</p> <p>Raises:</p> Type Description <code>ResourceNotFoundError</code> <p>If the category does not exist.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.create","title":"create","text":"<pre><code>create(category: Body(type=CategoryIn)) -&gt; Category\n</code></pre> <p>Create a new category.</p> <p>Parameters:</p> Name Type Description Default <code>category</code> <code>[CategoryIn][CategoryIn]</code> <p>Category data for creating a new category. Must include required fields like name and can include optional fields like description.</p> required <p>Returns:</p> Type Description <code>Category</code> <p>Category: The newly created Category object.</p> <p>Raises:</p> Type Description <code>ResourceExistsError</code> <p>If a category with the same name already exists.</p> <code>ValidationError</code> <p>If the category data is invalid.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.update","title":"update","text":"<pre><code>update(category_id: int, category: Body(type=CategoryIn)) -&gt; Category\n</code></pre> <p>Update an existing category.</p> <p>Parameters:</p> Name Type Description Default <code>category_id</code> <code>int</code> <p>Unique identifier of the category to update.</p> required <code>category</code> <code>[CategoryIn][CategoryIn]</code> <p>Updated category data. All fields will be replaced with the provided values.</p> required <p>Returns:</p> Type Description <code>Category</code> <p>Category: The updated Category object.</p> <p>Raises:</p> Type Description <code>ResourceNotFoundError</code> <p>If the category does not exist.</p> <code>ValidationError</code> <p>If the category data is invalid.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.delete","title":"delete","text":"<pre><code>delete(category_id: int) -&gt; None\n</code></pre> <p>Delete a category by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>category_id</code> <code>int</code> <p>Unique identifier of the category to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>ResourceNotFoundError</code> <p>If the category does not exist.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.list","title":"list","text":"<pre><code>list() -&gt; List[Category]\n</code></pre> <p>Get the complete list of categories.</p> <p>Results are automatically paginated and cached for better performance. The cache is invalidated when categories are modified.</p> <p>Returns:</p> Type Description <code>List[Category]</code> <p>List[Category]: Complete list of all Category objects.</p>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.search","title":"search","text":"<pre><code>search(\n    value: Optional[Any] = None,\n    field: Optional[str] = None,\n    method: SearchMethod = STRING_SUB,\n    filters: Optional[\n        List[Tuple[Any, Optional[str], Optional[SearchMethod]]]\n    ] = None,\n) -&gt; List[Category]\n</code></pre> <p>Search for categories matching specific criteria.</p> <p>This method allows flexible searching through categories using various matching methods. You can search for full or partial matches in all or specific fields.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[Any]</code> <p>The value to search for. Can be used alone or combined with <code>field</code>.</p> <code>None</code> <code>field</code> <code>Optional[str]</code> <p>The specific field to search in. If None, searches across all fields.</p> <code>None</code> <code>method</code> <code>SearchMethod</code> <p>The search method to use: - STRING_SUB: Partial string match (case-insensitive) - STRING_MATCH: Exact string match (case-sensitive) - STRICT: Exact match including type</p> <code>STRING_SUB</code> <code>filters</code> <code>Optional[List[Tuple[Any, Optional[str], Optional[SearchMethod]]]]</code> <p>Alternative to using individual parameters. A list of tuples, where each tuple contains (value, field, method). Multiple filters are combined with AND logic. Use this when you need multiple search criteria.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Category]</code> <p>List[Category]: List of Category objects matching the search criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Search by name\n&gt;&gt;&gt; api.search(\"News\", field=\"name\")\n&gt;&gt;&gt; # Search with multiple criteria\n&gt;&gt;&gt; api.search(filters=[\n...     (\"News\", \"name\", SearchMethod.STRING_SUB),\n...     (\"active\", \"status\", SearchMethod.STRICT)\n... ])\n</code></pre>"},{"location":"api/endpoints/categories/#bpkio_api.endpoints.categories.CategoriesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    category: CategoryIn,\n    if_exists: Optional[Literal[\"error\", \"retrieve\", \"update\"]] = None,\n) -&gt; Category\n</code></pre> <p>Create, retrieve, or update a category based on existence.</p> <p>This method provides flexible handling of category creation with different behaviors when the category already exists.</p> <p>Parameters:</p> Name Type Description Default <code>category</code> <code>CategoryIn</code> <p>The category data to create or update.</p> required <code>if_exists</code> <code>Optional[Literal['error', 'retrieve', 'update']]</code> <p>Controls behavior when a category with the same name exists:</p> <ul> <li><code>error</code>: Raise an error (default)</li> <li><code>retrieve</code>: Return the existing category</li> <li><code>update</code>: Update the existing category with new data</li> </ul> <code>None</code> <p>Returns:</p> Type Description <code>Category</code> <p>The Category object (created, retrieved, or updated)</p> <p>Raises:</p> Type Description <code>ResourceExistsError</code> <p>If the category exists and if_exists=\"error\".</p> <code>ValidationError</code> <p>If the category data is invalid.</p> <p>Examples:</p> <pre><code>from bpkio_api.helpers.upsert import UpsertOperationType, upsert_status\n\n# Create or update\ncategory = CategoryIn(name=\"News\", description=\"News content\")\nresult = api.upsert(category, if_exists=\"update\")            \n\n# Optional: Check the status of the operation\nstatus = upsert_status.get()\nif status == UpsertOperationType.CREATED:\n    print(\"Created new category\")\nelif status == UpsertOperationType.UPDATED:\n    print(\"Updated existing category\")\n</code></pre>"},{"location":"api/endpoints/categories/#examples","title":"Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\n\n# Initialize the client\nclient = BroadpeakIoApi(api_key=\"your-api-key\")\n\n# List all categories\ncategories = client.categories.list()\nfor category in categories:\n    print(f\"Category: {category.name}\")\n\n# Get a specific category\ncategory = client.categories.retrieve(\"category-id\")\n</code></pre>"},{"location":"api/endpoints/categories/#related-models","title":"Related Models","text":"<p>See the Categories Models documentation for details about the data models used with this API. </p>"},{"location":"api/endpoints/consumption/","title":"Consumption API","text":"<p>The Consumption API provides functionality to retrieve and analyze content consumption data in the broadpeak.io platform.</p>"},{"location":"api/endpoints/consumption/#bpkio_api.endpoints.consumption.ConsumptionApi","title":"bpkio_api.endpoints.consumption.ConsumptionApi","text":"<pre><code>ConsumptionApi(base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>retrieve</code> <p>Get the consumption data between 2 dates</p>"},{"location":"api/endpoints/consumption/#bpkio_api.endpoints.consumption.ConsumptionApi-functions","title":"Functions","text":""},{"location":"api/endpoints/consumption/#bpkio_api.endpoints.consumption.ConsumptionApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(\n    start_time: Query(start - time),\n    end_time: Query(end - time),\n    tenant: Query(tenantId),\n) -&gt; ConsumptionData\n</code></pre> <p>Get the consumption data between 2 dates</p>"},{"location":"api/endpoints/consumption/#examples","title":"Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\n\n# Initialize the client\nclient = BroadpeakIoApi(api_key=\"your-api-key\")\n\n# Get consumption data\nconsumption_data = client.consumption.list()\nfor data in consumption_data:\n    print(f\"Consumption: {data}\")\n</code></pre>"},{"location":"api/endpoints/consumption/#related-models","title":"Related Models","text":"<p>See the Consumption Models documentation for details about the data models used with this API. </p>"},{"location":"api/endpoints/services/","title":"Services API","text":"<p>The Services API provides functionality to manage services in the broadpeak.io platform. Services define how content is processed and delivered to end users.</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi","title":"bpkio_api.endpoints.services.ServicesApi","text":"<pre><code>ServicesApi(base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>count</code> <p>Get a count of all services</p> <code>create</code> <p>Create a service</p> <code>delete</code> <p>Delete a service</p> <code>list</code> <code>pause</code> <p>Disable (pause) a service</p> <code>retrieve</code> <p>Gets a service by its ID</p> <code>search</code> <p>Searches the list of services for those matching a particular filter query</p> <code>search_by_type</code> <code>unpause</code> <p>Enable (unpause) a service</p> <code>update</code> <p>Create a service</p> <code>upsert</code> <p>Create, retrieve, or update a service based on existence.</p> <p>Attributes:</p> Name Type Description <code>ad_insertion</code> <code>adaptive_streaming_cdn</code> <code>content_replacement</code> <code>virtual_channel</code>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.ad_insertion","title":"ad_insertion","text":"<pre><code>ad_insertion = AdInsertionServiceApi(\n    parent_api=self, base_url=base_url, **kwargs\n)\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.adaptive_streaming_cdn","title":"adaptive_streaming_cdn","text":"<pre><code>adaptive_streaming_cdn = AdaptiveStreamingCdnServiceApi(\n    parent_api=self, base_url=base_url, **kwargs\n)\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.content_replacement","title":"content_replacement","text":"<pre><code>content_replacement = ContentReplacementServiceApi(\n    parent_api=self, base_url=base_url, **kwargs\n)\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.virtual_channel","title":"virtual_channel","text":"<pre><code>virtual_channel = VirtualChannelServiceApi(\n    parent_api=self, base_url=base_url, **kwargs\n)\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi._get_page","title":"_get_page","text":"<pre><code>_get_page(offset: Query = 0, limit: Query = 5) -&gt; List[ServiceSparse]\n</code></pre> <p>List all services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Get a count of all services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.create","title":"create","text":"<pre><code>create(\n    service: ServiceIn,\n) -&gt; VirtualChannelService | ContentReplacementService | AdInsertionService\n</code></pre> <p>Create a service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.delete","title":"delete","text":"<pre><code>delete(service_id: int)\n</code></pre> <p>Delete a service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.list","title":"list","text":"<pre><code>list()\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.pause","title":"pause","text":"<pre><code>pause(\n    service_id: int,\n) -&gt; VirtualChannelService | ContentReplacementService | AdInsertionService\n</code></pre> <p>Disable (pause) a service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(\n    service_id: int,\n) -&gt; (\n    AdInsertionService\n    | ContentReplacementService\n    | VirtualChannelService\n    | AdaptiveStreamingCdnService\n    | None\n)\n</code></pre> <p>Gets a service by its ID</p> <p>This is a helper method that allows you to get the full Service sub-type (eg. virtual-channel, content-replacement etc) without having to know its type in advance and calling the specific endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>int</code> <p>The service identifier</p> required <p>Returns:</p> Type Description <code>AdInsertionService | ContentReplacementService | VirtualChannelService | AdaptiveStreamingCdnService | None</code> <p>VirtualChannelService, AdInsertionService, ContentReplacementService, AdaptiveStreamingCdnService:</p> <code>AdInsertionService | ContentReplacementService | VirtualChannelService | AdaptiveStreamingCdnService | None</code> <p>A specific sub-type of service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[ServiceSparse]\n</code></pre> <p>Searches the list of services for those matching a particular filter query</p> <p>You can search for full or partial matches in all or specific fields. All searches are done as string matches (regarding of the actual type of each field)</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The string value to search. Defaults to None.</p> <code>None</code> <code>field</code> <code>str</code> <p>The field name in which to search for the value. Defaults to None.</p> <code>None</code> <code>method</code> <code>SearchMethod</code> <p>How to perform the search. SearchMethod.STRING_SUB searches for partial string match. This is the default. SearchMethod.STRING_MATCH searches for a complete match (after casting to string). SearchMethod.STRICT searches for a strict match (including type)</p> <code>STRING_SUB</code> <code>filters</code> <code>List[Tuple[Any, Optional[str], Optional[SearchMethod]]]</code> <p>Can be used as an alternatitve to using <code>value</code>, <code>field</code> and <code>method</code>, in particular if multiple search patterns need to be specified (which are then treated as logical <code>AND</code>). Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ServiceSparse]</code> <p>List[Svc.ServiceSparse]: List of matching services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.search_by_type","title":"search_by_type","text":"<pre><code>search_by_type(type: ServiceType) -&gt; List[ServiceSparse]\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.unpause","title":"unpause","text":"<pre><code>unpause(\n    service_id: int,\n) -&gt; VirtualChannelService | ContentReplacementService | AdInsertionService\n</code></pre> <p>Enable (unpause) a service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.update","title":"update","text":"<pre><code>update(\n    service_id: int, service: ServiceIn\n) -&gt; VirtualChannelService | ContentReplacementService | AdInsertionService\n</code></pre> <p>Create a service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ServicesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    service: ServiceIn,\n    if_exists: str = \"retrieve\",\n    unique_fields: List[str | Tuple] = [],\n) -&gt; (\n    VirtualChannelService\n    | ContentReplacementService\n    | AdInsertionService\n    | ServiceIn\n)\n</code></pre> <p>Create, retrieve, or update a service based on existence.</p> <p>This method provides flexible handling of service creation with different behaviors when the service already exists.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>ServiceIn</code> <p>The service data to create or update.</p> required <code>if_exists</code> <code>str</code> <p>Controls behavior when a service with the same name exists:</p> <ul> <li><code>error</code>: Raise an error (default)</li> <li><code>retrieve</code>: Return the existing service</li> <li><code>update</code>: Update the existing service with new data</li> </ul> <code>'retrieve'</code> <p>Returns:</p> Type Description <code>VirtualChannelService | ContentReplacementService | AdInsertionService | ServiceIn</code> <p>The Service object (created, retrieved, or updated)</p> <p>Raises:</p> Type Description <code>ResourceExistsError</code> <p>If the service exists and if_exists=\"error\".</p> <code>ValidationError</code> <p>If the service data is invalid.</p> <p>Examples:</p> <pre><code>from bpkio_api.helpers.upsert import UpsertOperationType, upsert_status\n\n# Create or update\nservice = ContentReplacementServiceIn(name=\"News\", description=\"News content\")\nresult = api.upsert(service, if_exists=\"update\")            \n\n# Optional: Check the status of the operation\nstatus = upsert_status.get()\nif status == UpsertOperationType.CREATED:\n    print(\"Created new service\")\nelif status == UpsertOperationType.UPDATED:\n    print(\"Updated existing service\")\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi","title":"bpkio_api.endpoints.services.VirtualChannelServiceApi","text":"<pre><code>VirtualChannelServiceApi(parent_api: ServicesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>clear</code> <p>Delete all Virtual Channel slots, for a given service</p> <code>create</code> <p>Create a new Virtual Channel service</p> <code>delete</code> <p>Delete a Virtual Channel service, by ID</p> <code>list</code> <p>List all Virtual Channel services</p> <code>pause</code> <p>Pause a Virtual Channel service, by ID</p> <code>retrieve</code> <p>Get a single Virtual Channel service, by ID</p> <code>search</code> <p>Searches the list of Virtual Channel services for those matching a particular filter query</p> <code>unpause</code> <p>Unpause a Virtual Channel service, by ID</p> <code>update</code> <p>Update a Virtual Channel service</p> <code>upsert</code> <p>Conditionally create, retrieve or update a Virtual Channel service</p> <p>Attributes:</p> Name Type Description <code>parent_api</code> <code>slots</code>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.slots","title":"slots","text":"<pre><code>slots = VirtualChannelServiceSlotsApi(base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi-functions","title":"Functions","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.clear","title":"clear","text":"<pre><code>clear(service_id)\n</code></pre> <p>Delete all Virtual Channel slots, for a given service</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>int</code> <p>ID of the Content Replacement service</p> required <p>Returns:</p> Name Type Description <code>Tuple</code> <p>Number of slots successfully and unsuccessfully deleted</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.create","title":"create","text":"<pre><code>create(service: Body(type=VirtualChannelServiceIn)) -&gt; VirtualChannelService\n</code></pre> <p>Create a new Virtual Channel service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.delete","title":"delete","text":"<pre><code>delete(service_id: int)\n</code></pre> <p>Delete a Virtual Channel service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.list","title":"list","text":"<pre><code>list() -&gt; List[VirtualChannelService]\n</code></pre> <p>List all Virtual Channel services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.pause","title":"pause","text":"<pre><code>pause(service_id: int)\n</code></pre> <p>Pause a Virtual Channel service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(service_id)\n</code></pre> <p>Get a single Virtual Channel service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[VirtualChannelService]\n</code></pre> <p>Searches the list of Virtual Channel services for those matching a particular filter query</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.unpause","title":"unpause","text":"<pre><code>unpause(service_id: int)\n</code></pre> <p>Unpause a Virtual Channel service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.update","title":"update","text":"<pre><code>update(\n    service_id: int, service: Body(type=VirtualChannelServiceIn)\n) -&gt; VirtualChannelService\n</code></pre> <p>Update a Virtual Channel service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.VirtualChannelServiceApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    service: VirtualChannelServiceIn, if_exists: str = \"retrieve\"\n) -&gt; Tuple[VirtualChannelService, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update a Virtual Channel service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi","title":"bpkio_api.endpoints.services.AdInsertionServiceApi","text":"<pre><code>AdInsertionServiceApi(parent_api: ServicesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new Ad Insertion service</p> <code>delete</code> <p>Delete an Ad Insertion service, by ID</p> <code>list</code> <p>List all Ad Insertion services</p> <code>pause</code> <p>Pause an Ad Insertion service, by ID</p> <code>retrieve</code> <p>Get a single Ad Insertion service, by ID</p> <code>search</code> <p>Searches the list of Ad Insertion services for those matching a particular filter query</p> <code>unpause</code> <p>Unpause an Ad Insertion service, by ID</p> <code>update</code> <p>Update an Ad Insertion service</p> <code>upsert</code> <p>Conditionally create, retrieve or update an Ad Insertion service</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi-functions","title":"Functions","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.create","title":"create","text":"<pre><code>create(service: Body(type=AdInsertionServiceIn)) -&gt; AdInsertionService\n</code></pre> <p>Create a new Ad Insertion service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.delete","title":"delete","text":"<pre><code>delete(service_id: int)\n</code></pre> <p>Delete an Ad Insertion service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.list","title":"list","text":"<pre><code>list() -&gt; List[AdInsertionService]\n</code></pre> <p>List all Ad Insertion services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.pause","title":"pause","text":"<pre><code>pause(service_id: int)\n</code></pre> <p>Pause an Ad Insertion service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(service_id)\n</code></pre> <p>Get a single Ad Insertion service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[AdInsertionService]\n</code></pre> <p>Searches the list of Ad Insertion services for those matching a particular filter query</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.unpause","title":"unpause","text":"<pre><code>unpause(service_id: int)\n</code></pre> <p>Unpause an Ad Insertion service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.update","title":"update","text":"<pre><code>update(\n    service_id: int, service: Body(type=AdInsertionServiceIn)\n) -&gt; AdInsertionService\n</code></pre> <p>Update an Ad Insertion service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdInsertionServiceApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    service: AdInsertionServiceIn, if_exists: str = \"retrieve\"\n) -&gt; Tuple[AdInsertionService, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update an Ad Insertion service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi","title":"bpkio_api.endpoints.services.ContentReplacementServiceApi","text":"<pre><code>ContentReplacementServiceApi(parent_api: ServicesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>clear</code> <p>Delete all Content Replacement slots, for a given service</p> <code>create</code> <p>Create a new Content Replacement service</p> <code>delete</code> <p>Delete a Content Replacement service, by ID</p> <code>list</code> <p>List all Content Replacement services</p> <code>pause</code> <p>Disable (pause) a Content Replacement service, by ID</p> <code>retrieve</code> <p>Get a single Content Replacement service, by ID</p> <code>search</code> <p>Searches the list of Content Replacement services for those matching a particular filter query</p> <code>unpause</code> <p>Enable (unpause) a Content Replacement service, by ID</p> <code>update</code> <p>Update a Content Replacement service</p> <code>upsert</code> <p>Conditionally create, retrieve or update a Content Replacement service</p> <p>Attributes:</p> Name Type Description <code>parent_api</code> <code>slots</code>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.slots","title":"slots","text":"<pre><code>slots = ContentReplacementServiceSlotsApi(base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi-functions","title":"Functions","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.clear","title":"clear","text":"<pre><code>clear(service_id)\n</code></pre> <p>Delete all Content Replacement slots, for a given service</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>int</code> <p>ID of the Content Replacement service</p> required <p>Returns:</p> Name Type Description <code>Tuple</code> <p>Number of slots successfully and unsuccessfully deleted</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.create","title":"create","text":"<pre><code>create(\n    service: Body(type=ContentReplacementServiceIn),\n) -&gt; ContentReplacementService\n</code></pre> <p>Create a new Content Replacement service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.delete","title":"delete","text":"<pre><code>delete(service_id: int)\n</code></pre> <p>Delete a Content Replacement service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.list","title":"list","text":"<pre><code>list() -&gt; List[ContentReplacementService]\n</code></pre> <p>List all Content Replacement services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.pause","title":"pause","text":"<pre><code>pause(service_id: int) -&gt; ContentReplacementService\n</code></pre> <p>Disable (pause) a Content Replacement service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(service_id)\n</code></pre> <p>Get a single Content Replacement service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[ContentReplacementService]\n</code></pre> <p>Searches the list of Content Replacement services for those matching a particular filter query</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.unpause","title":"unpause","text":"<pre><code>unpause(service_id: int) -&gt; ContentReplacementService\n</code></pre> <p>Enable (unpause) a Content Replacement service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.update","title":"update","text":"<pre><code>update(\n    service_id: int, service: Body(type=ContentReplacementServiceIn)\n) -&gt; ContentReplacementService\n</code></pre> <p>Update a Content Replacement service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.ContentReplacementServiceApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    service: ContentReplacementServiceIn, if_exists: str = \"retrieve\"\n) -&gt; Tuple[ContentReplacementService, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update a Content Replacement service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi","title":"bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi","text":"<pre><code>AdaptiveStreamingCdnServiceApi(parent_api: ServicesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new Adaptive Streaming CDN service</p> <code>delete</code> <p>Delete an Adaptive Streaming CDN service, by ID</p> <code>list</code> <p>List all Adaptive Streaming CDN services</p> <code>pause</code> <p>Pause an Adaptive Streaming CDN service, by ID</p> <code>retrieve</code> <p>Get a single Adaptive Streaming CDN service, by ID</p> <code>search</code> <p>Searches the list of Adaptive Streaming CDN services for those matching a particular filter query</p> <code>unpause</code> <p>Unpause an Adaptive Streaming CDN service, by ID</p> <code>update</code> <p>Update an Adaptive Streaming CDN service</p> <code>upsert</code> <p>Conditionally create, retrieve or update an Adaptive Streaming CDN service</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi-functions","title":"Functions","text":""},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.create","title":"create","text":"<pre><code>create(\n    service: Body(type=AdaptiveStreamingCdnServiceIn),\n) -&gt; AdaptiveStreamingCdnService\n</code></pre> <p>Create a new Adaptive Streaming CDN service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.delete","title":"delete","text":"<pre><code>delete(service_id: int)\n</code></pre> <p>Delete an Adaptive Streaming CDN service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.list","title":"list","text":"<pre><code>list() -&gt; List[AdaptiveStreamingCdnService]\n</code></pre> <p>List all Adaptive Streaming CDN services</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.pause","title":"pause","text":"<pre><code>pause(service_id: int)\n</code></pre> <p>Pause an Adaptive Streaming CDN service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(service_id)\n</code></pre> <p>Get a single Adaptive Streaming CDN service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[AdaptiveStreamingCdnService]\n</code></pre> <p>Searches the list of Adaptive Streaming CDN services for those matching a particular filter query</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.unpause","title":"unpause","text":"<pre><code>unpause(service_id: int)\n</code></pre> <p>Unpause an Adaptive Streaming CDN service, by ID</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.update","title":"update","text":"<pre><code>update(\n    service_id: int, service: Body(type=AdaptiveStreamingCdnServiceIn)\n) -&gt; AdaptiveStreamingCdnService\n</code></pre> <p>Update an Adaptive Streaming CDN service</p>"},{"location":"api/endpoints/services/#bpkio_api.endpoints.services.AdaptiveStreamingCdnServiceApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    service: AdaptiveStreamingCdnServiceIn, if_exists: str = \"retrieve\"\n) -&gt; Tuple[AdaptiveStreamingCdnService, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update an Adaptive Streaming CDN service</p>"},{"location":"api/endpoints/services/#related-models","title":"Related Models","text":"<p>See the Services Models documentation for details about the data models used with this API. </p>"},{"location":"api/endpoints/sources/","title":"Sources API","text":"<p>The Sources API provides functionality to manage sources in the broadpeak.io platform. Sources represent the input content that can be processed and delivered through the platform.</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi","title":"bpkio_api.endpoints.sources.SourcesApi","text":"<pre><code>SourcesApi(base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>check</code> <p>Check a URL for compliance as a Source</p> <code>check_by_id</code> <code>count</code> <p>Get a count of all sources</p> <code>create</code> <p>Create a source</p> <code>delete</code> <p>Delete a source</p> <code>list</code> <code>retrieve</code> <p>Gets a source by its ID</p> <code>search</code> <p>Searches the list of sources for those matching a particular filter query</p> <code>search_by_type</code> <code>upsert</code> <p>Create, retrieve, or update a source based on existence.</p> <p>Attributes:</p> Name Type Description <code>ad_server</code> <code>asset</code> <code>asset_catalog</code> <code>live</code> <code>origin</code> <code>slate</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.ad_server","title":"ad_server","text":"<pre><code>ad_server = AdServerSourcesApi(parent_api=self, base_url=base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.asset","title":"asset","text":"<pre><code>asset = AssetSourcesApi(parent_api=self, base_url=base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.asset_catalog","title":"asset_catalog","text":"<pre><code>asset_catalog = AssetCatalogSourcesApi(\n    parent_api=self, base_url=base_url, **kwargs\n)\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.live","title":"live","text":"<pre><code>live = LiveSourcesApi(parent_api=self, base_url=base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.origin","title":"origin","text":"<pre><code>origin = OriginSourcesApi(parent_api=self, base_url=base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.slate","title":"slate","text":"<pre><code>slate = SlateSourcesApi(parent_api=self, base_url=base_url, **kwargs)\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi._get_page","title":"_get_page","text":"<pre><code>_get_page(offset: Query = 0, limit: Query = 5) -&gt; List[SourceSparse]\n</code></pre> <p>Get a partial list of Sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.check","title":"check","text":"<pre><code>check(\n    type: SourceType, body: Body(type=SourceStatusCheck)\n) -&gt; SourceStatusCheckResult\n</code></pre> <p>Check a URL for compliance as a Source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.check_by_id","title":"check_by_id","text":"<pre><code>check_by_id(source_id: int) -&gt; List[SourceStatusCheckResult]\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Get a count of all sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.create","title":"create","text":"<pre><code>create(\n    source: SourceIn,\n) -&gt; (\n    AssetSource | AdServerSource | AssetCatalogSource | SlateSource | LiveSource\n)\n</code></pre> <p>Create a source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete a source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.list","title":"list","text":"<pre><code>list()\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(\n    source_id: int,\n) -&gt; (\n    AssetSource\n    | AdServerSource\n    | AssetCatalogSource\n    | SlateSource\n    | LiveSource\n    | None\n)\n</code></pre> <p>Gets a source by its ID</p> <p>This is a helper method that allows you to get the full Source sub-type (eg. asset, asset-catalog) without having to know its type in advance and calling the specific endpoint</p> <p>Parameters:</p> Name Type Description Default <code>source_id</code> <code>int</code> <p>The source identifier</p> required <p>Raises:</p> Type Description <code>e</code> <p>description</p> <p>Returns:</p> Type Description <code>AssetSource | AdServerSource | AssetCatalogSource | SlateSource | LiveSource | None</code> <p>AssetSource | AssetCatalogSource | LiveSource | AdServerSource | SlateSource : A specific sub-type of source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[SourceSparse]\n</code></pre> <p>Searches the list of sources for those matching a particular filter query</p> <p>You can search for full or partial matches in all or specific fields. All searches are done as string matches (regarding of the actual type of each field)</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The string value to search. Defaults to None.</p> <code>None</code> <code>field</code> <code>str</code> <p>The field name in which to search for the value. Defaults to None.</p> <code>None</code> <code>method</code> <code>SearchMethod</code> <p>How to perform the search. SearchMethod.STRING_SUB searches for partial string match. This is the default. SearchMethod.STRING_MATCH searches for a complete match (after casting to string). SearchMethod.STRICT searches for a strict match (including type)</p> <code>STRING_SUB</code> <code>filters</code> <code>List[Tuple[Any, Optional[str], Optional[SearchMethod]]]</code> <p>Can be used as an alternatitve to using <code>value</code>, <code>field</code> and <code>method</code>, in particular if multiple search patterns need to be specified (which are then treated as logical <code>AND</code>). Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[SourceSparse]</code> <p>List[Svc.SourceSpare]: List of matching sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.search_by_type","title":"search_by_type","text":"<pre><code>search_by_type(type: SourceType) -&gt; List[SourceSparse]\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: SourceIn,\n    if_exists: str = \"retrieve\",\n    unique_fields: List[str | Tuple] = [],\n) -&gt; (\n    AssetSource\n    | AdServerSource\n    | AssetCatalogSource\n    | SlateSource\n    | LiveSource\n    | SourceIn\n)\n</code></pre> <p>Create, retrieve, or update a source based on existence.</p> <p>This method provides flexible handling of source creation with different behaviors when the source already exists.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>SourceIn</code> <p>The source data to create or update.</p> required <code>if_exists</code> <code>str</code> <p>Controls behavior when a source with the same name exists:</p> <ul> <li><code>error</code>: Raise an error (default)</li> <li><code>retrieve</code>: Return the existing source</li> <li><code>update</code>: Update the existing source with new data</li> </ul> <code>'retrieve'</code> <p>Returns:</p> Type Description <code>AssetSource | AdServerSource | AssetCatalogSource | SlateSource | LiveSource | SourceIn</code> <p>The Source object (created, retrieved, or updated)</p> <p>Raises:</p> Type Description <code>ResourceExistsError</code> <p>If the source exists and if_exists=\"error\".</p> <code>ValidationError</code> <p>If the source data is invalid.</p> <p>Examples:</p> <pre><code>from bpkio_api.helpers.upsert import UpsertOperationType, upsert_status\n\n# Create or update\nsource = LiveSourceIn(name=\"News\", description=\"News content\")\nresult = api.upsert(source, if_exists=\"update\")\n\n# Optional: Check the status of the operation\nstatus = upsert_status.get()\nif status == UpsertOperationType.CREATED:\n    print(\"Created new source\")\nelif status == UpsertOperationType.UPDATED:\n    print(\"Updated existing source\")\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi","title":"bpkio_api.endpoints.sources.AdServerSourcesApi","text":"<pre><code>AdServerSourcesApi(parent_api: SourcesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new ad server source</p> <code>create_from_url</code> <p>Convenience function to create an ad-server from a full URL</p> <code>delete</code> <p>Delete an ad server source, by ID</p> <code>list</code> <p>List all Ad Server sources</p> <code>retrieve</code> <p>Get a single ad server source, by ID</p> <code>search</code> <p>Searches the list of Ad Server sources for those matching a particular filter query</p> <code>update</code> <p>Update an Ad Server source</p> <code>upsert</code> <p>Conditionally create, retrieve or update an Ad Server source</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.create","title":"create","text":"<pre><code>create(source: Body(type=AdServerSourceIn)) -&gt; AdServerSource\n</code></pre> <p>Create a new ad server source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.create_from_url","title":"create_from_url","text":"<pre><code>create_from_url(name: str, url: str) -&gt; AdServerSource\n</code></pre> <p>Convenience function to create an ad-server from a full URL</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the Ad Server source</p> required <code>url</code> <code>str</code> <p>The full URL, including query parameters</p> required <p>Returns:</p> Name Type Description <code>AdServerSource</code> <code>AdServerSource</code> <p>the created Ad Server source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete an ad server source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.list","title":"list","text":"<pre><code>list() -&gt; List[AdServerSource]\n</code></pre> <p>List all Ad Server sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(source_id)\n</code></pre> <p>Get a single ad server source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[AdServerSource]\n</code></pre> <p>Searches the list of Ad Server sources for those matching a particular filter query</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.update","title":"update","text":"<pre><code>update(source_id: int, source: Body(type=AdServerSourceIn)) -&gt; AdServerSource\n</code></pre> <p>Update an Ad Server source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AdServerSourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: AdServerSourceIn, if_exists: str | None = None\n) -&gt; Tuple[AdServerSource, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update an Ad Server source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi","title":"bpkio_api.endpoints.sources.AssetSourcesApi","text":"<pre><code>AssetSourcesApi(parent_api: SourcesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new asset source</p> <code>delete</code> <p>Delete an asset source, by ID</p> <code>list</code> <p>List all Asset sources</p> <code>retrieve</code> <p>Get a single asset source, by ID</p> <code>search</code> <p>Search the list of Asset sources for those matching a particular filter query</p> <code>update</code> <p>Update an asset source</p> <code>upsert</code> <p>Conditionally create, retrieve or update an Asset source</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.create","title":"create","text":"<pre><code>create(source: Body(type=AssetSourceIn)) -&gt; AssetSource\n</code></pre> <p>Create a new asset source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete an asset source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.list","title":"list","text":"<pre><code>list() -&gt; List[AssetSource]\n</code></pre> <p>List all Asset sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(source_id)\n</code></pre> <p>Get a single asset source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[AssetSource]\n</code></pre> <p>Search the list of Asset sources for those matching a particular filter query</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.update","title":"update","text":"<pre><code>update(source_id: int, source: Body(type=AssetSourceIn)) -&gt; AssetSource\n</code></pre> <p>Update an asset source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetSourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: AssetSourceIn, if_exists: str = \"retrieve\"\n) -&gt; Tuple[AssetSource, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update an Asset source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi","title":"bpkio_api.endpoints.sources.AssetCatalogSourcesApi","text":"<pre><code>AssetCatalogSourcesApi(parent_api: SourcesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new asset catalog source</p> <code>delete</code> <p>Delete an asset catalog source, by ID</p> <code>list</code> <p>List all Asset Catalog sources</p> <code>retrieve</code> <p>Get a single asset catalog source, by ID</p> <code>search</code> <p>Search the list of Asset Catalog sources for those matching a particular filter query</p> <code>update</code> <p>Updates an asset source</p> <code>upsert</code> <p>Conditionally create, retrieve or update an Asset Catalog source</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.create","title":"create","text":"<pre><code>create(source: Body(type=AssetCatalogSourceIn)) -&gt; AssetCatalogSource\n</code></pre> <p>Create a new asset catalog source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete an asset catalog source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.list","title":"list","text":"<pre><code>list() -&gt; List[AssetCatalogSource]\n</code></pre> <p>List all Asset Catalog sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(source_id)\n</code></pre> <p>Get a single asset catalog source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[AssetCatalogSource]\n</code></pre> <p>Search the list of Asset Catalog sources for those matching a particular filter query</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.update","title":"update","text":"<pre><code>update(\n    source_id: int, source: Body(type=AssetCatalogSourceIn)\n) -&gt; AssetCatalogSource\n</code></pre> <p>Updates an asset source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.AssetCatalogSourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: AssetCatalogSourceIn, if_exists: str | None = None\n) -&gt; Tuple[AssetCatalogSource, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update an Asset Catalog source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi","title":"bpkio_api.endpoints.sources.LiveSourcesApi","text":"<pre><code>LiveSourcesApi(parent_api: SourcesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new live source</p> <code>delete</code> <p>Delete a live source, by ID</p> <code>list</code> <p>List all Live sources</p> <code>retrieve</code> <p>Get a single live source, by ID</p> <code>search</code> <p>Search the list of Live sources for those matching a particular filter query</p> <code>update</code> <p>Update a live source</p> <code>upsert</code> <p>Conditionally create, retrieve or update a Live source</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.create","title":"create","text":"<pre><code>create(source: Body(type=LiveSourceIn)) -&gt; LiveSource\n</code></pre> <p>Create a new live source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete a live source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.list","title":"list","text":"<pre><code>list() -&gt; List[LiveSource]\n</code></pre> <p>List all Live sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(source_id)\n</code></pre> <p>Get a single live source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[LiveSource]\n</code></pre> <p>Search the list of Live sources for those matching a particular filter query</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.update","title":"update","text":"<pre><code>update(source_id: int, source: Body(type=LiveSourceIn)) -&gt; LiveSource\n</code></pre> <p>Update a live source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.LiveSourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: LiveSourceIn, if_exists: str | None = None\n) -&gt; Tuple[LiveSource, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update a Live source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi","title":"bpkio_api.endpoints.sources.OriginSourcesApi","text":"<pre><code>OriginSourcesApi(parent_api: SourcesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new origin source</p> <code>delete</code> <p>Delete a origin source, by ID</p> <code>list</code> <p>List all Origin sources</p> <code>retrieve</code> <p>Get a single origin source, by ID</p> <code>search</code> <p>Searches the list of Origin sources for those matching a particular filter query</p> <code>update</code> <p>Update an origin source</p> <code>upsert</code> <p>Conditionally create, retrieve or update an origin source</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.create","title":"create","text":"<pre><code>create(source: Body(type=OriginSourceIn)) -&gt; OriginSource\n</code></pre> <p>Create a new origin source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete a origin source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.list","title":"list","text":"<pre><code>list() -&gt; List[OriginSource]\n</code></pre> <p>List all Origin sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(source_id)\n</code></pre> <p>Get a single origin source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[OriginSource]\n</code></pre> <p>Searches the list of Origin sources for those matching a particular filter query</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.update","title":"update","text":"<pre><code>update(source_id: int, source: Body(type=OriginSourceIn)) -&gt; OriginSource\n</code></pre> <p>Update an origin source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.OriginSourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: OriginSourceIn, if_exists: str | None = None\n) -&gt; Tuple[OriginSource, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update an origin source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi","title":"bpkio_api.endpoints.sources.SlateSourcesApi","text":"<pre><code>SlateSourcesApi(parent_api: SourcesApi, base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new slate source</p> <code>delete</code> <p>Delete a slate source, by ID</p> <code>list</code> <p>List all Slate sources</p> <code>retrieve</code> <p>Get a single slate source, by ID</p> <code>search</code> <p>Searches the list of Slate sources for those matching a particular filter query</p> <code>update</code> <p>Update a slate source</p> <code>upsert</code> <p>Conditionally create, retrieve or update a slate source</p> <p>Attributes:</p> Name Type Description <code>parent_api</code>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi-attributes","title":"Attributes","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.parent_api","title":"parent_api","text":"<pre><code>parent_api = parent_api\n</code></pre>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.create","title":"create","text":"<pre><code>create(source: Body(type=SlateSourceIn)) -&gt; SlateSource\n</code></pre> <p>Create a new slate source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.delete","title":"delete","text":"<pre><code>delete(source_id: int)\n</code></pre> <p>Delete a slate source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.list","title":"list","text":"<pre><code>list() -&gt; List[SlateSource]\n</code></pre> <p>List all Slate sources</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(source_id)\n</code></pre> <p>Get a single slate source, by ID</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[SlateSource]\n</code></pre> <p>Searches the list of Slate sources for those matching a particular filter query</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.update","title":"update","text":"<pre><code>update(source_id: int, source: Body(type=SlateSourceIn)) -&gt; SlateSource\n</code></pre> <p>Update a slate source</p>"},{"location":"api/endpoints/sources/#bpkio_api.endpoints.sources.SlateSourcesApi.upsert","title":"upsert","text":"<pre><code>upsert(\n    source: SlateSourceIn, if_exists: str | None = None\n) -&gt; Tuple[SlateSource, UpsertOperationType]\n</code></pre> <p>Conditionally create, retrieve or update a slate source</p>"},{"location":"api/endpoints/sources/#related-models","title":"Related Models","text":"<p>See the Sources Models documentation for details about the data models used with this API. </p>"},{"location":"api/endpoints/tenants/","title":"Tenants API","text":"<p>The Tenants API provides functionality to manage tenants in the broadpeak.io platform. This includes tenant information retrieval and management.</p>"},{"location":"api/endpoints/tenants/#bpkio_api.endpoints.tenants.TenantsApi","title":"bpkio_api.endpoints.tenants.TenantsApi","text":"<pre><code>TenantsApi(base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>retrieve_self</code> <p>Get the tenant information for the current user</p>"},{"location":"api/endpoints/tenants/#bpkio_api.endpoints.tenants.TenantsApi-functions","title":"Functions","text":""},{"location":"api/endpoints/tenants/#bpkio_api.endpoints.tenants.TenantsApi.retrieve_self","title":"retrieve_self","text":"<pre><code>retrieve_self() -&gt; Tenant\n</code></pre> <p>Get the tenant information for the current user</p>"},{"location":"api/endpoints/tenants/#examples","title":"Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\n\n# Initialize the client\nclient = BroadpeakIoApi(api_key=\"your-api-key\")\n\n# Get current tenant information\ntenant = client.tenants.retrieve_self()\nprint(f\"Tenant: {tenant.name}\")\nprint(f\"Commercial Plan: {tenant.commercialPlan}\")\n</code></pre>"},{"location":"api/endpoints/tenants/#related-models","title":"Related Models","text":"<p>See the Tenants Models documentation for details about the data models used with this API. </p>"},{"location":"api/endpoints/transcoding_profiles/","title":"Transcoding Profiles API","text":"<p>The Transcoding Profiles API provides functionality to manage transcoding profiles in the broadpeak.io platform. These profiles define how content is transcoded for different delivery scenarios.</p>"},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi","title":"bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi","text":"<pre><code>TranscodingProfilesApi(base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>_get_page</code> <p>List all transcoding profiles</p> <code>count</code> <p>Get a count of all transcoding profiles</p> <code>list</code> <code>retrieve</code> <p>Get a single transcoding profile, by ID</p> <code>search</code> <p>Searches the list of transcoding profiles for those matching a particular filter query</p>"},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi-functions","title":"Functions","text":""},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi._get_page","title":"_get_page","text":"<pre><code>_get_page(\n    offset: Query = 0, limit: Query = 50, tenant_id: Query(tenantId) = None\n) -&gt; List[TranscodingProfile]\n</code></pre> <p>List all transcoding profiles</p>"},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi.count","title":"count","text":"<pre><code>count(tenant_id: Query(tenantId) = None) -&gt; int\n</code></pre> <p>Get a count of all transcoding profiles</p>"},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi.list","title":"list","text":"<pre><code>list(tenant_id: int = None)\n</code></pre>"},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(\n    transcoding_profile_id, tenant_id: Query(tenantId) = None\n) -&gt; TranscodingProfile\n</code></pre> <p>Get a single transcoding profile, by ID</p>"},{"location":"api/endpoints/transcoding_profiles/#bpkio_api.endpoints.transcoding_profiles.TranscodingProfilesApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n    tenant_id: int = None,\n) -&gt; List[TranscodingProfile]\n</code></pre> <p>Searches the list of transcoding profiles for those matching a particular filter query</p> <p>You can search for full or partial matches in all or specific fields. All searches are done as string matches (regarding of the actual type of each field)</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The string value to search. Defaults to None.</p> <code>None</code> <code>field</code> <code>str</code> <p>The field name in which to search for the value. Defaults to None.</p> <code>None</code> <code>method</code> <code>SearchMethod</code> <p>How to perform the search. SearchMethod.STRING_SUB searches for partial string match. This is the default. SearchMethod.STRING_MATCH searches for a complete match (after casting to string). SearchMethod.STRICT searches for a strict match (including type)</p> <code>STRING_SUB</code> <code>filters</code> <code>List[Tuple[Any, Optional[str], Optional[SearchMethod]]]</code> <p>Can be used as an alternatitve to using <code>value</code>, <code>field</code> and <code>method</code>, in particular if multiple search patterns need to be specified (which are then treated as logical <code>AND</code>). Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[TranscodingProfile]</code> <p>List[Svc.SourceSpare]: List of matching sources</p>"},{"location":"api/endpoints/transcoding_profiles/#examples","title":"Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\n\n# Initialize the client\nclient = BroadpeakIoApi(api_key=\"your-api-key\")\n\n# List all transcoding profiles\nprofiles = client.transcoding_profiles.list()\nfor profile in profiles:\n    print(f\"Profile: {profile.name}\")\n\n# Get a specific profile\nprofile = client.transcoding_profiles.retrieve(\"profile-id\")\n</code></pre>"},{"location":"api/endpoints/transcoding_profiles/#related-models","title":"Related Models","text":"<p>See the Transcoding Profiles Models documentation for details about the data models used with this API. </p>"},{"location":"api/endpoints/users/","title":"Users API","text":"<p>The Users API provides functionality to manage users in the broadpeak.io platform. This includes user creation, retrieval, and management operations.</p>"},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi","title":"bpkio_api.endpoints.users.UsersApi","text":"<pre><code>UsersApi(base_url='', **kwargs)\n</code></pre> <p>               Bases: <code>BpkioSdkConsumer</code></p> <p>Methods:</p> Name Description <code>_get_page</code> <p>Get a paginated list of users</p> <code>retrieve</code> <p>Get a single user, by ID</p> <code>count</code> <p>Get a count of all users</p> <code>list</code> <p>List all users</p> <code>search</code> <p>Searches the list of users for those matching a particular filter query</p>"},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi-functions","title":"Functions","text":""},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi._get_page","title":"_get_page","text":"<pre><code>_get_page(offset: Query = 0, limit: Query = 5) -&gt; List[User]\n</code></pre> <p>Get a paginated list of users</p>"},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi.retrieve","title":"retrieve","text":"<pre><code>retrieve(user_id) -&gt; User\n</code></pre> <p>Get a single user, by ID</p>"},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Get a count of all users</p>"},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>List all users</p>"},{"location":"api/endpoints/users/#bpkio_api.endpoints.users.UsersApi.search","title":"search","text":"<pre><code>search(\n    value: Any | None = None,\n    field: str | None = None,\n    method: SearchMethod = STRING_SUB,\n    filters: List[Tuple[Any, str | None, SearchMethod | None]] | None = None,\n) -&gt; List[User]\n</code></pre> <p>Searches the list of users for those matching a particular filter query</p> <p>You can search for full or partial matches in all or specific fields. All searches are done as string matches (regarding of the actual type of each field)</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The string value to search. Defaults to None.</p> <code>None</code> <code>field</code> <code>str</code> <p>The field name in which to search for the value. Defaults to None.</p> <code>None</code> <code>method</code> <code>SearchMethod</code> <p>How to perform the search. SearchMethod.STRING_SUB searches for partial string match. This is the default. SearchMethod.STRING_MATCH searches for a complete match (after casting to string). SearchMethod.STRICT searches for a strict match (including type)</p> <code>STRING_SUB</code> <code>filters</code> <code>List[Tuple[Any, Optional[str], Optional[SearchMethod]]]</code> <p>Can be used as an alternatitve to using <code>value</code>, <code>field</code> and <code>method</code>, in particular if multiple search patterns need to be specified (which are then treated as logical <code>AND</code>). Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[User]</code> <p>List[User]: List of matching sources</p>"},{"location":"api/endpoints/users/#examples","title":"Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\n\n# Initialize the client\nclient = BroadpeakIoApi(api_key=\"your-api-key\")\n\n# List all users\nusers = client.users.list()\nfor user in users:\n    print(f\"User: {user.email}\")\n\n# Get a specific user\nuser = client.users.retrieve(\"user-id\")\n</code></pre>"},{"location":"api/endpoints/users/#related-models","title":"Related Models","text":"<p>See the Users Models documentation for details about the data models used with this API. </p>"},{"location":"api/models/","title":"Models Overview","text":"<p>The broadpeak.io Python SDK uses Pydantic models to represent various resources and ensure type safety and validation. Each model corresponds to a specific resource type in the broadpeak.io API.</p>"},{"location":"api/models/#available-models","title":"Available Models","text":"<ul> <li>Sources</li> <li>Services</li> <li>Categories</li> <li>Transcoding Profiles</li> <li>Users</li> <li>Tenants</li> <li>Consumption</li> </ul>"},{"location":"api/models/#common-models","title":"Common Models","text":"<p>The Common models define shared data structures used across different models, used to ensure consistency and validation.</p>"},{"location":"api/models/#bpkio_api.models.common","title":"bpkio_api.models.common","text":""},{"location":"api/models/#bpkio_api.models.common-classes","title":"Classes","text":""},{"location":"api/models/#bpkio_api.models.common.NamedModel","title":"NamedModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#bpkio_api.models.common.NamedModel-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre>"},{"location":"api/models/#bpkio_api.models.common.BaseResource","title":"BaseResource","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#bpkio_api.models.common.BaseResource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre>"},{"location":"api/models/#bpkio_api.models.common.WithDescription","title":"WithDescription","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#bpkio_api.models.common.WithDescription-attributes","title":"Attributes","text":"description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre>"},{"location":"api/models/#bpkio_api.models.common.PropertyMixin","title":"PropertyMixin","text":""},{"location":"api/models/#bpkio_api.models.common.PropertyMixin-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api/models/#bpkio_api.models.common-functions","title":"Functions","text":""},{"location":"api/models/#bpkio_api.models.common.summary","title":"summary","text":"<pre><code>summary(model: BaseModel, with_class=False)\n</code></pre>"},{"location":"api/models/#related-documentation","title":"Related Documentation","text":"<p>These models are used throughout the SDK. See the specific endpoint and model documentation for details about how they are used in different contexts. </p>"},{"location":"api/models/consumption/","title":"Consumption Models","text":"<p>The Consumption models define the data structures used for managing consumption data in the broadpeak.io platform.</p>"},{"location":"api/models/consumption/#models-reference","title":"Models Reference","text":""},{"location":"api/models/consumption/#bpkio_api.models.Consumption","title":"bpkio_api.models.Consumption","text":""},{"location":"api/models/consumption/#bpkio_api.models.Consumption-classes","title":"Classes","text":""},{"location":"api/models/consumption/#bpkio_api.models.Consumption.ConsumptionData","title":"ConsumptionData","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/consumption/#bpkio_api.models.Consumption.ConsumptionData-attributes","title":"Attributes","text":"tenantId \u00b6 <pre><code>tenantId: int\n</code></pre> <code></code> startTime \u00b6 <pre><code>startTime: datetime\n</code></pre> <code></code> endTime \u00b6 <pre><code>endTime: datetime\n</code></pre> <code></code> egress \u00b6 <pre><code>egress: int\n</code></pre> <code></code> virtualChannel \u00b6 <pre><code>virtualChannel: int\n</code></pre> <code></code> contentReplacement \u00b6 <pre><code>contentReplacement: int\n</code></pre> <code></code> insertedAds \u00b6 <pre><code>insertedAds: int\n</code></pre> <code></code> days \u00b6 <pre><code>days\n</code></pre>"},{"location":"api/models/consumption/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.models.Consumption import ConsumptionData\n\n# Work with consumption data\nconsumption = ConsumptionData(\n    # Add required fields based on the model\n)\n\n# Access consumption properties\nprint(f\"Consumption Data: {consumption}\")\n</code></pre>"},{"location":"api/models/consumption/#related-endpoints","title":"Related Endpoints","text":"<p>See the Consumption API documentation for details about the available operations on consumption data. </p>"},{"location":"api/models/services/","title":"Services Models","text":"<p>The Services models define the data structures used for managing services in the broadpeak.io platform.</p>"},{"location":"api/models/services/#models-reference","title":"Models Reference","text":""},{"location":"api/models/services/#bpkio_api.models.Services","title":"bpkio_api.models.Services","text":""},{"location":"api/models/services/#bpkio_api.models.Services-classes","title":"Classes","text":""},{"location":"api/models/services/#bpkio_api.models.Services.BaseResource","title":"BaseResource","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.BaseResource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.NamedModel","title":"NamedModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.NamedModel-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.PropertyMixin","title":"PropertyMixin","text":""},{"location":"api/models/services/#bpkio_api.models.Services.PropertyMixin-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdServerSource","title":"AdServerSource","text":"<p>               Bases: <code>AdServerSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdServerSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> queries \u00b6 <pre><code>queries: Optional[str]\n</code></pre> <code></code> template \u00b6 <pre><code>template: Optional[str]\n</code></pre> <code></code> queryParameters \u00b6 <pre><code>queryParameters: Optional[List[AdServerQueryParameter]] = []\n</code></pre> <code></code> adOrigin \u00b6 <pre><code>adOrigin: Optional[OriginConfig] = None\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdServerSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    u = self.url\n    if self.queryParameters:\n        qpStrings = [qp.as_string() for qp in self.queryParameters]\n        u = u + \"?\" + \"&amp;\".join(qpStrings)\n    return u\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def is_live(self):\n    return False\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AssetSource","title":"AssetSource","text":"<p>               Bases: <code>AssetSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AssetSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat]\n</code></pre> <code></code> type \u00b6 <pre><code>type: Literal['asset']\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AssetSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return self.url\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def is_live(self):\n    return False\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.SlateSource","title":"SlateSource","text":"<p>               Bases: <code>SlateSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.SlateSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat]\n</code></pre> <code></code> type \u00b6 <pre><code>type: Literal['slate']\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.SlateSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return self.url\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def is_live(self):\n    return False\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.SourceSparse","title":"SourceSparse","text":"<p>               Bases: <code>SourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.SourceSparse-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> type \u00b6 <pre><code>type: SourceType\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.SourceSparse-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Sources.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return self.url\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.TranscodingProfile","title":"TranscodingProfile","text":"<p>               Bases: <code>TranscodingProfileIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.TranscodingProfile-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> content \u00b6 <pre><code>content: str\n</code></pre> <code></code> tenantId \u00b6 <pre><code>tenantId: Optional[int]\n</code></pre> <code></code> internalId \u00b6 <pre><code>internalId: str\n</code></pre> <code></code> json_content \u00b6 <pre><code>json_content\n</code></pre> <code></code> layers \u00b6 <pre><code>layers\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.TranscodingProfileId","title":"TranscodingProfileId","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.TranscodingProfileId-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceType","title":"ServiceType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceType-attributes","title":"Attributes","text":"AD_INSERTION \u00b6 <pre><code>AD_INSERTION = 'ad-insertion'\n</code></pre> <code></code> VIRTUAL_CHANNEL \u00b6 <pre><code>VIRTUAL_CHANNEL = 'virtual-channel'\n</code></pre> <code></code> CONTENT_REPLACEMENT \u00b6 <pre><code>CONTENT_REPLACEMENT = 'content-replacement'\n</code></pre> <code></code> ADAPTIVE_STREAMING_CDN \u00b6 <pre><code>ADAPTIVE_STREAMING_CDN = 'adaptive-streaming-cdn'\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.QueryManagement","title":"QueryManagement","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.QueryManagement-attributes","title":"Attributes","text":"addToMediaSegmentURI \u00b6 <pre><code>addToMediaSegmentURI: Optional[List[str]] = []\n</code></pre> <code></code> addToHLSMediaPlaylistURI \u00b6 <pre><code>addToHLSMediaPlaylistURI: Optional[List[str]] = []\n</code></pre> <code></code> forwardInOriginRequest \u00b6 <pre><code>forwardInOriginRequest: Optional[List[str]] = []\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.UrlManagement","title":"UrlManagement","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.UrlManagement-attributes","title":"Attributes","text":"convertSourceSegmentToAbsoluteURI \u00b6 <pre><code>convertSourceSegmentToAbsoluteURI: Optional[bool] = False\n</code></pre> <code></code> convertAdSegmentToAbsoluteURI \u00b6 <pre><code>convertAdSegmentToAbsoluteURI: Optional[bool] = False\n</code></pre> <code></code> sourceSegmentPrefix \u00b6 <pre><code>sourceSegmentPrefix: Optional[str] = ''\n</code></pre> <code></code> adSegmentPrefix \u00b6 <pre><code>adSegmentPrefix: Optional[str] = ''\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AuthorizationHeader","title":"AuthorizationHeader","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AuthorizationHeader-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> value \u00b6 <pre><code>value: str\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdvancedOptions","title":"AdvancedOptions","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdvancedOptions-attributes","title":"Attributes","text":"queryManagement \u00b6 <pre><code>queryManagement: Optional[QueryManagement] = None\n</code></pre> <code></code> urlManagement \u00b6 <pre><code>urlManagement: Optional[UrlManagement] = None\n</code></pre> <code></code> authorizationHeader \u00b6 <pre><code>authorizationHeader: Optional[AuthorizationHeader] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceIn","title":"ServiceIn","text":"<p>               Bases: <code>NamedModel</code>, <code>PropertyMixin</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceIn-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonServiceFields","title":"WithCommonServiceFields","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonServiceFields-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> hash \u00b6 <pre><code>hash\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonServiceFields-functions","title":"Functions","text":"make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceSparse","title":"ServiceSparse","text":"<p>               Bases: <code>ServiceIn</code>, <code>WithCommonServiceFields</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceSparse-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> hash \u00b6 <pre><code>hash\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> type \u00b6 <pre><code>type: ServiceType\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ServiceSparse-functions","title":"Functions","text":"make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n</code></pre> <code></code> get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.VodAdInsertionModel","title":"VodAdInsertionModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.VodAdInsertionModel-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: AdServerSource\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.VodAdInsertionModelIn","title":"VodAdInsertionModelIn","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.VodAdInsertionModelIn-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: BaseResource\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdReplacementModel","title":"LiveAdReplacementModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdReplacementModel-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: AdServerSource\n</code></pre> <code></code> gapFiller \u00b6 <pre><code>gapFiller: Optional[Union[SlateSource, AssetSource]] = None\n</code></pre> <code></code> frenchAddressableTV \u00b6 <pre><code>frenchAddressableTV: Optional[bool] = False\n</code></pre> <code></code> maxAdDurationExcess \u00b6 <pre><code>maxAdDurationExcess: float = 1\n</code></pre> <code></code> pastAdBreakReplacement \u00b6 <pre><code>pastAdBreakReplacement: float = 0\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdReplacementModelIn","title":"LiveAdReplacementModelIn","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdReplacementModelIn-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: BaseResource\n</code></pre> <code></code> gapFiller \u00b6 <pre><code>gapFiller: Optional[BaseResource] = None\n</code></pre> <code></code> frenchAddressableTV \u00b6 <pre><code>frenchAddressableTV: Optional[bool] = False\n</code></pre> <code></code> maxAdDurationExcess \u00b6 <pre><code>maxAdDurationExcess: float = 1\n</code></pre> <code></code> pastAdBreakReplacement \u00b6 <pre><code>pastAdBreakReplacement: float = 0\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdBreakInsertionModel","title":"AdBreakInsertionModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdBreakInsertionModel-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: AdServerSource\n</code></pre> <code></code> gapFiller \u00b6 <pre><code>gapFiller: Optional[Union[SlateSource, AssetSource]] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdBreakInsertionModelIn","title":"AdBreakInsertionModelIn","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdBreakInsertionModelIn-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: BaseResource\n</code></pre> <code></code> gapFiller \u00b6 <pre><code>gapFiller: Optional[BaseResource] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdPreRollModel","title":"LiveAdPreRollModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdPreRollModel-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: AdServerSource\n</code></pre> <code></code> maxDuration \u00b6 <pre><code>maxDuration: float = 360\n</code></pre> <code></code> offset \u00b6 <pre><code>offset: float = 0\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdPreRollModelIn","title":"LiveAdPreRollModelIn","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.LiveAdPreRollModelIn-attributes","title":"Attributes","text":"adServer \u00b6 <pre><code>adServer: BaseResource\n</code></pre> <code></code> maxDuration \u00b6 <pre><code>maxDuration: float = 360\n</code></pre> <code></code> offset \u00b6 <pre><code>offset: float = 0\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ServerSideAdTracking","title":"ServerSideAdTracking","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.ServerSideAdTracking-attributes","title":"Attributes","text":"enable \u00b6 <pre><code>enable: Optional[bool] = False\n</code></pre> <code></code> checkAdMediaSegmentAvailability \u00b6 <pre><code>checkAdMediaSegmentAvailability: Optional[bool] = False\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonAdInsertionServiceFields","title":"WithCommonAdInsertionServiceFields","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonAdInsertionServiceFields-attributes","title":"Attributes","text":"enableAdTranscoding \u00b6 <pre><code>enableAdTranscoding: Optional[bool] = False\n</code></pre> <code></code> serverSideAdTracking \u00b6 <pre><code>serverSideAdTracking: ServerSideAdTracking\n</code></pre> <code></code> transcodingProfile \u00b6 <pre><code>transcodingProfile: Optional[TranscodingProfileId] = None\n</code></pre> <code></code> sub_type \u00b6 <pre><code>sub_type\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonAdInsertionServiceFields-functions","title":"Functions","text":"make_full_url \u00b6 <pre><code>make_full_url(extra=None, *args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, extra=None, *args, **kwargs):\n    u = handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n\n    if extra:\n        return urljoin(u, extra)\n\n    return u\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    if getattr(self, \"vodAdInsertion\", None):\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdInsertionServiceIn","title":"AdInsertionServiceIn","text":"<p>               Bases: <code>ServiceIn</code>, <code>WithCommonAdInsertionServiceFields</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdInsertionServiceIn-attributes","title":"Attributes","text":"enableAdTranscoding \u00b6 <pre><code>enableAdTranscoding: Optional[bool] = False\n</code></pre> <code></code> serverSideAdTracking \u00b6 <pre><code>serverSideAdTracking: ServerSideAdTracking\n</code></pre> <code></code> transcodingProfile \u00b6 <pre><code>transcodingProfile: Optional[TranscodingProfileId] = None\n</code></pre> <code></code> sub_type \u00b6 <pre><code>sub_type\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> source \u00b6 <pre><code>source: BaseResource\n</code></pre> <code></code> vodAdInsertion \u00b6 <pre><code>vodAdInsertion: Optional[VodAdInsertionModelIn] = None\n</code></pre> <code></code> liveAdPreRoll \u00b6 <pre><code>liveAdPreRoll: Optional[LiveAdPreRollModelIn] = None\n</code></pre> <code></code> liveAdReplacement \u00b6 <pre><code>liveAdReplacement: Optional[LiveAdReplacementModelIn] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdInsertionServiceIn-functions","title":"Functions","text":"make_full_url \u00b6 <pre><code>make_full_url(extra=None, *args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, extra=None, *args, **kwargs):\n    u = handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n\n    if extra:\n        return urljoin(u, extra)\n\n    return u\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    if getattr(self, \"vodAdInsertion\", None):\n        return False\n    else:\n        return True\n</code></pre> <code></code> get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdInsertionService","title":"AdInsertionService","text":"<p>               Bases: <code>WithCommonAdInsertionServiceFields</code>, <code>WithCommonServiceFields</code>, <code>ServiceIn</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdInsertionService-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> hash \u00b6 <pre><code>hash\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format\n</code></pre> <code></code> enableAdTranscoding \u00b6 <pre><code>enableAdTranscoding: Optional[bool] = False\n</code></pre> <code></code> serverSideAdTracking \u00b6 <pre><code>serverSideAdTracking: ServerSideAdTracking\n</code></pre> <code></code> transcodingProfile \u00b6 <pre><code>transcodingProfile: Optional[TranscodingProfileId] = None\n</code></pre> <code></code> sub_type \u00b6 <pre><code>sub_type\n</code></pre> <code></code> source \u00b6 <pre><code>source: SourceSparse\n</code></pre> <code></code> vodAdInsertion \u00b6 <pre><code>vodAdInsertion: Optional[VodAdInsertionModel] = None\n</code></pre> <code></code> liveAdPreRoll \u00b6 <pre><code>liveAdPreRoll: Optional[LiveAdPreRollModel] = None\n</code></pre> <code></code> liveAdReplacement \u00b6 <pre><code>liveAdReplacement: Optional[LiveAdReplacementModel] = None\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdInsertionService-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(extra=None, *args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, extra=None, *args, **kwargs):\n    u = handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n\n    if extra:\n        return urljoin(u, extra)\n\n    return u\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    if getattr(self, \"vodAdInsertion\", None):\n        return False\n    else:\n        return True\n</code></pre> <code></code> main_source \u00b6 <pre><code>main_source()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def main_source(self):\n    return self.source\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ContentReplacementServiceIn","title":"ContentReplacementServiceIn","text":"<p>               Bases: <code>ServiceIn</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.ContentReplacementServiceIn-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> source \u00b6 <pre><code>source: BaseResource\n</code></pre> <code></code> replacement \u00b6 <pre><code>replacement: BaseResource\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ContentReplacementServiceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    return True\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ContentReplacementService","title":"ContentReplacementService","text":"<p>               Bases: <code>WithCommonServiceFields</code>, <code>ServiceIn</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.ContentReplacementService-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> hash \u00b6 <pre><code>hash\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format\n</code></pre> <code></code> source \u00b6 <pre><code>source: SourceSparse\n</code></pre> <code></code> replacement \u00b6 <pre><code>replacement: SourceSparse\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.ContentReplacementService-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n</code></pre> <code></code> main_source \u00b6 <pre><code>main_source()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def main_source(self):\n    return self.source\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonVirtualChannelServiceFields","title":"WithCommonVirtualChannelServiceFields","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonVirtualChannelServiceFields-attributes","title":"Attributes","text":"enableAdTranscoding \u00b6 <pre><code>enableAdTranscoding: Optional[bool] = False\n</code></pre> <code></code> serverSideAdTracking \u00b6 <pre><code>serverSideAdTracking: Optional[ServerSideAdTracking] = None\n</code></pre> <code></code> transcodingProfile \u00b6 <pre><code>transcodingProfile: Optional[TranscodingProfileId] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonVirtualChannelServiceFields-functions","title":"Functions","text":"is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    return True\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.VirtualChannelServiceIn","title":"VirtualChannelServiceIn","text":"<p>               Bases: <code>ServiceIn</code>, <code>WithCommonVirtualChannelServiceFields</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.VirtualChannelServiceIn-attributes","title":"Attributes","text":"enableAdTranscoding \u00b6 <pre><code>enableAdTranscoding: Optional[bool] = False\n</code></pre> <code></code> serverSideAdTracking \u00b6 <pre><code>serverSideAdTracking: Optional[ServerSideAdTracking] = None\n</code></pre> <code></code> transcodingProfile \u00b6 <pre><code>transcodingProfile: Optional[TranscodingProfileId] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> baseLive \u00b6 <pre><code>baseLive: BaseResource\n</code></pre> <code></code> adBreakInsertion \u00b6 <pre><code>adBreakInsertion: Optional[AdBreakInsertionModelIn] = None\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.VirtualChannelServiceIn-functions","title":"Functions","text":"is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    return True\n</code></pre> <code></code> get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.VirtualChannelService","title":"VirtualChannelService","text":"<p>               Bases: <code>WithCommonVirtualChannelServiceFields</code>, <code>WithCommonServiceFields</code>, <code>ServiceIn</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.VirtualChannelService-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> hash \u00b6 <pre><code>hash\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format\n</code></pre> <code></code> enableAdTranscoding \u00b6 <pre><code>enableAdTranscoding: Optional[bool] = False\n</code></pre> <code></code> serverSideAdTracking \u00b6 <pre><code>serverSideAdTracking: Optional[ServerSideAdTracking] = None\n</code></pre> <code></code> transcodingProfile \u00b6 <pre><code>transcodingProfile: Optional[TranscodingProfileId] = None\n</code></pre> <code></code> baseLive \u00b6 <pre><code>baseLive: SourceSparse\n</code></pre> <code></code> adBreakInsertion \u00b6 <pre><code>adBreakInsertion: Optional[AdBreakInsertionModel] = None\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.VirtualChannelService-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def make_full_url(self, *args, **kwargs):\n    return handle_service_id(self.url, move=kwargs.get(\"service_as_param\"))\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def is_live(self):\n    return True\n</code></pre> <code></code> main_source \u00b6 <pre><code>main_source()\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def main_source(self):\n    return self.baseLive\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonAdaptiveStreamingCdnServiceFields","title":"WithCommonAdaptiveStreamingCdnServiceFields","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.WithCommonAdaptiveStreamingCdnServiceFields-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> disableManifestCaching \u00b6 <pre><code>disableManifestCaching: bool\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdaptiveStreamingCdnServiceIn","title":"AdaptiveStreamingCdnServiceIn","text":"<p>               Bases: <code>WithCommonAdaptiveStreamingCdnServiceFields</code>, <code>ServiceIn</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdaptiveStreamingCdnServiceIn-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> disableManifestCaching \u00b6 <pre><code>disableManifestCaching: bool\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdaptiveStreamingCdnServiceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdaptiveStreamingCdnService","title":"AdaptiveStreamingCdnService","text":"<p>               Bases: <code>WithCommonAdaptiveStreamingCdnServiceFields</code>, <code>ServiceIn</code></p>"},{"location":"api/models/services/#bpkio_api.models.Services.AdaptiveStreamingCdnService-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> tags \u00b6 <pre><code>tags: Optional[List[str]] = []\n</code></pre> <code></code> state \u00b6 <pre><code>state: str = 'enabled'\n</code></pre> <code></code> advancedOptions \u00b6 <pre><code>advancedOptions: Optional[AdvancedOptions]\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> url \u00b6 <pre><code>url: HttpUrl\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> disableManifestCaching \u00b6 <pre><code>disableManifestCaching: bool\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services.AdaptiveStreamingCdnService-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> Source code in <code>bpkio_api/models/common.py</code> <pre><code>def get_all_fields_and_properties(self) -&gt; Dict[str, Any]:\n    all_data = self.dict()\n\n    for name, attribute in inspect.getmembers(self.__class__):\n        if isinstance(attribute, property):\n            all_data[name] = getattr(self, name)\n\n    return all_data\n</code></pre>"},{"location":"api/models/services/#bpkio_api.models.Services-functions","title":"Functions","text":""},{"location":"api/models/services/#bpkio_api.models.Services.handle_service_id","title":"handle_service_id","text":"<pre><code>handle_service_id(url: str, move: bool)\n</code></pre> Source code in <code>bpkio_api/models/Services.py</code> <pre><code>def handle_service_id(url: str, move: bool):\n    if not move:\n        return url\n\n    u_parts = urlparse(url)\n    path_parts = u_parts.path.split(\"/\")\n    service_id = path_parts[1]\n    new_path = \"/\".join(path_parts[2:])\n\n    query_params = parse_qs(u_parts.query)\n    query_params[\"bpkio_serviceid\"] = service_id\n\n    u_parts = u_parts._replace(path=new_path, query=urlencode(query_params, doseq=True))\n    return urlunparse(u_parts)\n</code></pre>"},{"location":"api/models/services/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.models.Services import Service\n\n# Create a new service\nservice = Service(\n    name=\"my-service\",\n    description=\"My service description\",\n    # Add other required fields\n)\n\n# Access service properties\nprint(f\"Service Name: {service.name}\")\nprint(f\"Service Description: {service.description}\")\n</code></pre>"},{"location":"api/models/services/#related-endpoints","title":"Related Endpoints","text":"<p>See the Services API documentation for details about the available operations on services. </p>"},{"location":"api/models/sources/","title":"Sources Models","text":"<p>The Sources models define the data structures used for managing sources in the broadpeak.io platform.</p>"},{"location":"api/models/sources/#source-types","title":"Source Types","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources","title":"bpkio_api.models.Sources","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources-classes","title":"Classes","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerSource","title":"AdServerSource","text":"<p>               Bases: <code>AdServerSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> queries \u00b6 <pre><code>queries: Optional[str]\n</code></pre> <code></code> template \u00b6 <pre><code>template: Optional[str]\n</code></pre> <code></code> queryParameters \u00b6 <pre><code>queryParameters: Optional[List[AdServerQueryParameter]] = []\n</code></pre> <code></code> adOrigin \u00b6 <pre><code>adOrigin: Optional[OriginConfig] = None\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetCatalogSource","title":"AssetCatalogSource","text":"<p>               Bases: <code>AssetCatalogSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetCatalogSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> assetSample \u00b6 <pre><code>assetSample: str\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetCatalogSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(extra=None, *args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetSource","title":"AssetSource","text":"<p>               Bases: <code>AssetSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat]\n</code></pre> <code></code> type \u00b6 <pre><code>type: Literal['asset']\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.LiveSource","title":"LiveSource","text":"<p>               Bases: <code>LiveSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.LiveSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre> <code></code> multiPeriod \u00b6 <pre><code>multiPeriod: bool = False\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat]\n</code></pre> <code></code> type \u00b6 <pre><code>type\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.LiveSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.OriginSource","title":"OriginSource","text":"<p>               Bases: <code>OriginSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.OriginSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> type \u00b6 <pre><code>type: Literal['origin']\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.OriginSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SlateSource","title":"SlateSource","text":"<p>               Bases: <code>SlateSourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SlateSource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat]\n</code></pre> <code></code> type \u00b6 <pre><code>type: Literal['slate']\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SlateSource-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#source-input-models","title":"Source Input Models","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources","title":"bpkio_api.models.Sources","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources-classes","title":"Classes","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerSourceIn","title":"AdServerSourceIn","text":"<p>               Bases: <code>SourceIn</code>, <code>WithDescription</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerSourceIn-attributes","title":"Attributes","text":"description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> queries \u00b6 <pre><code>queries: Optional[str]\n</code></pre> <code></code> template \u00b6 <pre><code>template: Optional[str]\n</code></pre> <code></code> queryParameters \u00b6 <pre><code>queryParameters: Optional[List[AdServerQueryParameter]] = []\n</code></pre> <code></code> adOrigin \u00b6 <pre><code>adOrigin: Optional[OriginConfig] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerSourceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetCatalogSourceIn","title":"AssetCatalogSourceIn","text":"<p>               Bases: <code>SourceIn</code>, <code>WithDescription</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetCatalogSourceIn-attributes","title":"Attributes","text":"description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> assetSample \u00b6 <pre><code>assetSample: str\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetCatalogSourceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(extra=None, *args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetSourceIn","title":"AssetSourceIn","text":"<p>               Bases: <code>SourceIn</code>, <code>WithDescription</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetSourceIn-attributes","title":"Attributes","text":"description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AssetSourceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.LiveSourceIn","title":"LiveSourceIn","text":"<p>               Bases: <code>SourceIn</code>, <code>WithDescription</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.LiveSourceIn-attributes","title":"Attributes","text":"description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> backupIp \u00b6 <pre><code>backupIp: Optional[IPvAnyAddress] = None\n</code></pre> <code></code> origin \u00b6 <pre><code>origin: Optional[OriginConfig] = None\n</code></pre> <code></code> multiPeriod \u00b6 <pre><code>multiPeriod: bool = False\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.LiveSourceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SlateSourceIn","title":"SlateSourceIn","text":"<p>               Bases: <code>SourceIn</code>, <code>WithDescription</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SlateSourceIn-attributes","title":"Attributes","text":"description \u00b6 <pre><code>description: Optional[str] = None\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SlateSourceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre> <code></code> is_live \u00b6 <pre><code>is_live()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceIn","title":"SourceIn","text":"<p>               Bases: <code>NamedModel</code>, <code>PropertyMixin</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceIn-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceIn-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre>"},{"location":"api/models/sources/#enums-and-supporting-models","title":"Enums and Supporting Models","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources","title":"bpkio_api.models.Sources","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources-classes","title":"Classes","text":""},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceType","title":"SourceType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceType-attributes","title":"Attributes","text":"AD_SERVER \u00b6 <pre><code>AD_SERVER = 'ad-server'\n</code></pre> <code></code> ASSET \u00b6 <pre><code>ASSET = 'asset'\n</code></pre> <code></code> ASSET_CATALOG \u00b6 <pre><code>ASSET_CATALOG = 'asset-catalog'\n</code></pre> <code></code> LIVE \u00b6 <pre><code>LIVE = 'live'\n</code></pre> <code></code> SLATE \u00b6 <pre><code>SLATE = 'slate'\n</code></pre> <code></code> ORIGIN \u00b6 <pre><code>ORIGIN = 'origin'\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceSparse","title":"SourceSparse","text":"<p>               Bases: <code>SourceIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceSparse-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> url \u00b6 <pre><code>url: Optional[AnyHttpUrl | str] = None\n</code></pre> <code></code> full_url \u00b6 <pre><code>full_url\n</code></pre> <code></code> type \u00b6 <pre><code>type: SourceType\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat] = None\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceSparse-functions","title":"Functions","text":"get_all_fields_and_properties \u00b6 <pre><code>get_all_fields_and_properties() -&gt; Dict[str, Any]\n</code></pre> <code></code> make_full_url \u00b6 <pre><code>make_full_url(*args, **kwargs)\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceStatusCheckResult","title":"SourceStatusCheckResult","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceStatusCheckResult-attributes","title":"Attributes","text":"sourceStatus \u00b6 <pre><code>sourceStatus: str\n</code></pre> <code></code> sourceInfo \u00b6 <pre><code>sourceInfo: object\n</code></pre> <code></code> errors \u00b6 <pre><code>errors: list\n</code></pre> <code></code> warnings \u00b6 <pre><code>warnings: list\n</code></pre> <code></code> format \u00b6 <pre><code>format: Optional[MediaFormat] = None\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.SourceStatusCheckResult-classes","title":"Classes","text":"Config \u00b6 Attributes\u00b6 use_enum_values \u00b6 <pre><code>use_enum_values = True\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerQueryParameter","title":"AdServerQueryParameter","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerQueryParameter-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> type \u00b6 <pre><code>type: AdServerQueryParameterType\n</code></pre> <code></code> value \u00b6 <pre><code>value: Optional[str] = None\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerQueryParameter-functions","title":"Functions","text":"as_string \u00b6 <pre><code>as_string()\n</code></pre> <code></code> is_from_variable \u00b6 <pre><code>is_from_variable()\n</code></pre> <code></code> is_from_query_parameter \u00b6 <pre><code>is_from_query_parameter()\n</code></pre> <code></code> is_from_header \u00b6 <pre><code>is_from_header()\n</code></pre> <code></code> is_forwarded \u00b6 <pre><code>is_forwarded()\n</code></pre> <code></code> is_custom \u00b6 <pre><code>is_custom()\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerQueryParameterType","title":"AdServerQueryParameterType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.AdServerQueryParameterType-attributes","title":"Attributes","text":"from_query_parameter \u00b6 <pre><code>from_query_parameter = 'from-query-parameter'\n</code></pre> <code></code> from_header \u00b6 <pre><code>from_header = 'from-header'\n</code></pre> <code></code> from_variable \u00b6 <pre><code>from_variable = 'from-variable'\n</code></pre> <code></code> forward \u00b6 <pre><code>forward = 'forward'\n</code></pre> <code></code> custom \u00b6 <pre><code>custom = 'custom'\n</code></pre>"},{"location":"api/models/sources/#bpkio_api.models.Sources.NamedModel","title":"NamedModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/sources/#bpkio_api.models.Sources.NamedModel-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre>"},{"location":"api/models/sources/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.models.Sources import (\n    LiveSource,\n    LiveSourceIn,\n    SourceType,\n    SourceStatusCheckResult\n)\n\n# Create a new live source\nsource = LiveSourceIn(\n    name=\"Live Stream\",\n    description=\"Main live stream source\",\n    type=SourceType.HLS,\n    url=\"https://example.com/stream.m3u8\",\n    tags=[\"live\", \"main\"]\n)\n\n# The API will return a full LiveSource object\nlive_source = LiveSource(\n    id=\"source-123\",\n    name=source.name,\n    description=source.description,\n    type=source.type,\n    url=source.url,\n    tags=source.tags,\n    status=SourceStatusCheckResult.ACTIVE\n)\n\n# Access source properties\nprint(f\"Source Name: {live_source.name}\")\nprint(f\"Source Type: {live_source.type}\")\nprint(f\"Source Status: {live_source.status}\")\nprint(f\"Source Tags: {', '.join(live_source.tags)}\")\n</code></pre>"},{"location":"api/models/sources/#related-endpoints","title":"Related Endpoints","text":"<p>See the Sources API documentation for details about the available operations on sources. </p>"},{"location":"api/models/tenants/","title":"Tenants Models","text":"<p>The Tenants models define the data structures used for managing tenants in the broadpeak.io platform.</p>"},{"location":"api/models/tenants/#models-reference","title":"Models Reference","text":""},{"location":"api/models/tenants/#bpkio_api.models.Tenants","title":"bpkio_api.models.Tenants","text":""},{"location":"api/models/tenants/#bpkio_api.models.Tenants-classes","title":"Classes","text":""},{"location":"api/models/tenants/#bpkio_api.models.Tenants.NamedModel","title":"NamedModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/tenants/#bpkio_api.models.Tenants.NamedModel-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre>"},{"location":"api/models/tenants/#bpkio_api.models.Tenants.Tenant","title":"Tenant","text":"<p>               Bases: <code>NamedModel</code></p>"},{"location":"api/models/tenants/#bpkio_api.models.Tenants.Tenant-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> id \u00b6 <pre><code>id: Optional[int] = None\n</code></pre> <code></code> email \u00b6 <pre><code>email: Optional[str]\n</code></pre> <code></code> commercialPlan \u00b6 <pre><code>commercialPlan: str\n</code></pre> <code></code> state \u00b6 <pre><code>state: str\n</code></pre> <code></code> sendAnalytics \u00b6 <pre><code>sendAnalytics: Optional[bool] = False\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> subscriptionDate \u00b6 <pre><code>subscriptionDate: Optional[datetime]\n</code></pre> <code></code> expirationDate \u00b6 <pre><code>expirationDate: Optional[datetime]\n</code></pre>"},{"location":"api/models/tenants/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.models.Tenants import Tenant\n\n# Create a tenant object\ntenant = Tenant(\n    name=\"My Tenant\",\n    description=\"My tenant description\",\n    commercialPlan=\"STANDARD\",\n    # Add other required fields\n)\n\n# Access tenant properties\nprint(f\"Tenant Name: {tenant.name}\")\nprint(f\"Commercial Plan: {tenant.commercialPlan}\")\n</code></pre>"},{"location":"api/models/tenants/#related-endpoints","title":"Related Endpoints","text":"<p>See the Tenants API documentation for details about the available operations on tenants. </p>"},{"location":"api/models/transcoding_profiles/","title":"Transcoding Profiles Models","text":"<p>The Transcoding Profiles models define the data structures used for managing transcoding profiles in the broadpeak.io platform.</p>"},{"location":"api/models/transcoding_profiles/#models-reference","title":"Models Reference","text":""},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles","title":"bpkio_api.models.TranscodingProfiles","text":""},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles-classes","title":"Classes","text":""},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.BaseResource","title":"BaseResource","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.BaseResource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.NamedModel","title":"NamedModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.NamedModel-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.TranscodingProfileId","title":"TranscodingProfileId","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.TranscodingProfileId-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.TranscodingProfileIn","title":"TranscodingProfileIn","text":"<p>               Bases: <code>NamedModel</code></p>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.TranscodingProfileIn-attributes","title":"Attributes","text":"name \u00b6 <pre><code>name: str\n</code></pre> <code></code> content \u00b6 <pre><code>content: str\n</code></pre> <code></code> tenantId \u00b6 <pre><code>tenantId: Optional[int]\n</code></pre>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.TranscodingProfile","title":"TranscodingProfile","text":"<p>               Bases: <code>TranscodingProfileIn</code>, <code>BaseResource</code></p>"},{"location":"api/models/transcoding_profiles/#bpkio_api.models.TranscodingProfiles.TranscodingProfile-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> name \u00b6 <pre><code>name: str\n</code></pre> <code></code> content \u00b6 <pre><code>content: str\n</code></pre> <code></code> tenantId \u00b6 <pre><code>tenantId: Optional[int]\n</code></pre> <code></code> internalId \u00b6 <pre><code>internalId: str\n</code></pre> <code></code> json_content \u00b6 <pre><code>json_content\n</code></pre> <code></code> layers \u00b6 <pre><code>layers\n</code></pre>"},{"location":"api/models/transcoding_profiles/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.models.TranscodingProfiles import TranscodingProfile\n\n# Create a new transcoding profile\nprofile = TranscodingProfile(\n    name=\"my-profile\",\n    description=\"My transcoding profile\",\n    # Add other required fields\n)\n\n# Access profile properties\nprint(f\"Profile Name: {profile.name}\")\nprint(f\"Profile Description: {profile.description}\")\n</code></pre>"},{"location":"api/models/transcoding_profiles/#related-endpoints","title":"Related Endpoints","text":"<p>See the Transcoding Profiles API documentation for details about the available operations on transcoding profiles. </p>"},{"location":"api/models/users/","title":"Users Models","text":"<p>The Users models define the data structures used for managing users in the broadpeak.io platform.</p>"},{"location":"api/models/users/#models-reference","title":"Models Reference","text":""},{"location":"api/models/users/#bpkio_api.models.Users","title":"bpkio_api.models.Users","text":""},{"location":"api/models/users/#bpkio_api.models.Users-classes","title":"Classes","text":""},{"location":"api/models/users/#bpkio_api.models.Users.BaseResource","title":"BaseResource","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/users/#bpkio_api.models.Users.BaseResource-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre>"},{"location":"api/models/users/#bpkio_api.models.Users.User","title":"User","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"api/models/users/#bpkio_api.models.Users.User-attributes","title":"Attributes","text":"id \u00b6 <pre><code>id: int\n</code></pre> <code></code> summary \u00b6 <pre><code>summary\n</code></pre> <code></code> firstName \u00b6 <pre><code>firstName: str\n</code></pre> <code></code> lastName \u00b6 <pre><code>lastName: str\n</code></pre> <code></code> email \u00b6 <pre><code>email: str\n</code></pre> <code></code> tenantId \u00b6 <pre><code>tenantId: Optional[int]\n</code></pre> <code></code> creationDate \u00b6 <pre><code>creationDate: datetime\n</code></pre> <code></code> updateDate \u00b6 <pre><code>updateDate: datetime\n</code></pre> <code></code> name \u00b6 <pre><code>name\n</code></pre>"},{"location":"api/models/users/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.models.Users import User\n\n# Create a new user object\nuser = User(\n    email=\"user@example.com\",\n    # Add other required fields\n)\n\n# Access user properties\nprint(f\"User Email: {user.email}\")\n</code></pre>"},{"location":"api/models/users/#related-endpoints","title":"Related Endpoints","text":"<p>See the Users API documentation for details about the available operations on users. </p>"},{"location":"api/utils/","title":"Utilities Overview","text":"<p>The broadpeak.io Python SDK includes several utility modules that provide additional functionality and support features.</p>"},{"location":"api/utils/#credential-provider","title":"Credential Provider","text":"<p>The credential provider handles tenant profiles and API key management:</p>"},{"location":"api/utils/#bpkio_api.credential_provider","title":"bpkio_api.credential_provider","text":""},{"location":"api/utils/#bpkio_api.credential_provider-attributes","title":"Attributes","text":""},{"location":"api/utils/#bpkio_api.credential_provider.DEFAULT_INI_FILE","title":"DEFAULT_INI_FILE","text":"<pre><code>DEFAULT_INI_FILE = join(expanduser('~'), '.bpkio/tenants')\n</code></pre>"},{"location":"api/utils/#bpkio_api.credential_provider-classes","title":"Classes","text":""},{"location":"api/utils/#bpkio_api.credential_provider.TenantProfile","title":"TenantProfile","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/utils/#bpkio_api.credential_provider.TenantProfile-attributes","title":"Attributes","text":"label \u00b6 <pre><code>label: str\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> fqdn \u00b6 <pre><code>fqdn: Optional[str] = DEFAULT_FQDN\n</code></pre> <code></code> api_key \u00b6 <pre><code>api_key: str\n</code></pre> <code></code> credential_source \u00b6 <pre><code>credential_source: str = 'file'\n</code></pre>"},{"location":"api/utils/#bpkio_api.credential_provider.TenantProfileProvider","title":"TenantProfileProvider","text":"<pre><code>TenantProfileProvider(filename: Optional[str] = None)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, filename: Optional[str] = None) -&gt; None:\n    f = Path(filename or DEFAULT_INI_FILE)\n    if not f.exists():\n        f.parent.mkdir(exist_ok=True, parents=True)\n        f.touch()\n\n    self._filename = f\n    self._read_ini_file()\n</code></pre>"},{"location":"api/utils/#bpkio_api.credential_provider.TenantProfileProvider-attributes","title":"Attributes","text":"config \u00b6 <pre><code>config = ConfigParser()\n</code></pre> <code></code> inifile \u00b6 <pre><code>inifile\n</code></pre>"},{"location":"api/utils/#bpkio_api.credential_provider.TenantProfileProvider-functions","title":"Functions","text":"get_tenant_profile \u00b6 <pre><code>get_tenant_profile(tenant_label: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def get_tenant_profile(self, tenant_label: str):\n    tenant_info = self._get_tenant_section(tenant_label)\n\n    tp = TenantProfile(\n        label=tenant_label,\n        api_key=tenant_info.get(\"api_key\"),\n        id=tenant_info.getint(\"id\"),\n        fqdn=tenant_info.get(\"fqdn\", DEFAULT_FQDN),\n    )\n    if \"_cred_source\" in tenant_info:\n        tp.credential_source = tenant_info[\"_cred_source\"]\n    return tp\n</code></pre> <code></code> list_tenants \u00b6 <pre><code>list_tenants()\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def list_tenants(self):\n    tenants = []\n    for section in self.config.sections():\n        tenants.append(\n            TenantProfile(\n                label=section,\n                id=self.config[section].getint(\"id\"),\n                fqdn=self.config[section].get(\"fqdn\", DEFAULT_FQDN),\n                api_key=self.config[section].get(\"api_key\"),\n            )\n        )\n\n    return tenants\n</code></pre> <code></code> has_tenant_label \u00b6 <pre><code>has_tenant_label(tenant: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def has_tenant_label(self, tenant: str):\n    return tenant in self.config\n</code></pre> <code></code> has_default_tenant \u00b6 <pre><code>has_default_tenant()\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def has_default_tenant(self):\n    return self.has_tenant_label(\"default\")\n</code></pre> <code></code> get_tenant_label_from_working_directory \u00b6 <pre><code>get_tenant_label_from_working_directory()\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def get_tenant_label_from_working_directory(self):\n    try:\n        with open(\".tenant\") as f:\n            return f.read().strip()\n    except Exception:\n        return None\n</code></pre> <code></code> store_tenant_label_in_working_directory \u00b6 <pre><code>store_tenant_label_in_working_directory(tenant: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def store_tenant_label_in_working_directory(self, tenant: str):\n    with open(\".tenant\", \"w\") as f:\n        f.write(tenant)\n</code></pre> <code></code> add_tenant \u00b6 <pre><code>add_tenant(key: str, entries: dict)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def add_tenant(self, key: str, entries: dict):\n    self.config[key] = entries\n    with open(self._filename, \"w\") as ini:\n        self.config.write(ini)\n</code></pre> <code></code> replace_tenant_api_key \u00b6 <pre><code>replace_tenant_api_key(key: str, api_key: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def replace_tenant_api_key(self, key: str, api_key: str):\n    self.config[key][\"api_key\"] = api_key\n    with open(self._filename, \"w\") as ini:\n        self.config.write(ini)\n</code></pre> <code></code> remove_tenant \u00b6 <pre><code>remove_tenant(key: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def remove_tenant(self, key: str):\n    self.config.remove_section(key)\n    with open(self._filename, \"w\") as ini:\n        self.config.write(ini)\n</code></pre> <code></code> resolve_platform \u00b6 <pre><code>resolve_platform(platform)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>@staticmethod\ndef resolve_platform(platform):\n    if platform == \"prod\":\n        return \"api.broadpeak.io\"\n    if platform == \"staging\":\n        return \"apidev.ridgeline.fr\"\n    return platform\n</code></pre>"},{"location":"api/utils/#bpkio_api.credential_provider.InvalidTenantError","title":"InvalidTenantError","text":"<pre><code>InvalidTenantError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, message: str) -&gt; None:\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/#bpkio_api.credential_provider.NoTenantSectionError","title":"NoTenantSectionError","text":"<pre><code>NoTenantSectionError(\n    message: str = \"No valid tenant section could be found in the tenant config file\",\n)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, message: str = \"No valid tenant section could be found in the tenant config file\") -&gt; None:\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/#caching","title":"Caching","text":"<p>The caching module provides caching functionality for API responses:</p>"},{"location":"api/utils/#bpkio_api.caching","title":"bpkio_api.caching","text":""},{"location":"api/utils/#bpkio_api.caching-attributes","title":"Attributes","text":""},{"location":"api/utils/#bpkio_api.caching.CACHE","title":"CACHE","text":"<pre><code>CACHE: Cache | None = None\n</code></pre>"},{"location":"api/utils/#bpkio_api.caching-functions","title":"Functions","text":""},{"location":"api/utils/#bpkio_api.caching.init_cache","title":"init_cache","text":"<pre><code>init_cache(fqdn, tenant_id)\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def init_cache(fqdn, tenant_id):\n    temp_dir = tempfile.gettempdir()\n    cache_dir = os.path.join(temp_dir, \"bpkio_sdk\", str(fqdn), str(tenant_id))\n\n    global CACHE\n    CACHE = diskcache.Cache(cache_dir)\n    logger.debug(\"Cache folder: \" + cache_dir)\n</code></pre>"},{"location":"api/utils/#bpkio_api.caching.cache_api_results","title":"cache_api_results","text":"<pre><code>cache_api_results(key: str, ttl: int = 120)\n</code></pre> <p>Decorator to retrieve and/or store the results of an API helper method into Cache</p> Source code in <code>bpkio_api/caching.py</code> <pre><code>def cache_api_results(key: str, ttl: int = 120):\n    \"\"\"Decorator to retrieve and/or store the results of an API helper method into Cache\"\"\"\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            global CACHE\n            if CACHE is not None and key in CACHE:\n                logger.debug(f\"Cache entry found for '{key}'\")\n                SessionRecorder.record(SessionComment(\"Cache hit\"))\n                return CACHE[key]\n            result = func(*args, **kwargs)\n            if CACHE is not None:\n                CACHE.set(key=key, value=result, expire=ttl)\n                logger.debug(f\"Adding cache entry for '{key}'\")\n            return result\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"api/utils/#bpkio_api.caching.invalidate_cache","title":"invalidate_cache","text":"<pre><code>invalidate_cache(key: str)\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def invalidate_cache(key: str):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            result = func(*args, **kwargs)\n\n            global CACHE\n            if CACHE is not None and key in CACHE:\n                del CACHE[key]\n                logger.debug(\"Cache for '{key}' cleared\")\n            return result\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"api/utils/#bpkio_api.caching.clear_cache_entry","title":"clear_cache_entry","text":"<pre><code>clear_cache_entry(key: str)\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def clear_cache_entry(key: str):\n    global CACHE\n    if CACHE is not None and key in CACHE:\n        del CACHE[key]\n        logger.debug(f\"Cache for '{key}' cleared\")\n</code></pre>"},{"location":"api/utils/#bpkio_api.caching.clear_cache","title":"clear_cache","text":"<pre><code>clear_cache()\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def clear_cache():\n    global CACHE\n    if CACHE is not None:\n        CACHE.clear()\n        logger.debug(\"Cache cleared\")\n</code></pre>"},{"location":"api/utils/#exceptions","title":"Exceptions","text":"<p>Custom exceptions used throughout the SDK:</p>"},{"location":"api/utils/#bpkio_api.exceptions","title":"bpkio_api.exceptions","text":""},{"location":"api/utils/#bpkio_api.exceptions-classes","title":"Classes","text":""},{"location":"api/utils/#bpkio_api.exceptions.BroadpeakIoApiError","title":"BroadpeakIoApiError","text":"<pre><code>BroadpeakIoApiError(status_code, message, reason, url)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, status_code, message, reason, url):\n    self.status_code = status_code\n    self.message = message\n    self.reason = reason\n    self.url = url\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.BroadpeakIoApiError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.AccessForbiddenError","title":"AccessForbiddenError","text":"<pre><code>AccessForbiddenError(status_code, message, reason, url)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, status_code, message, reason, url):\n    super().__init__(status_code, message, reason, url)\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.AccessForbiddenError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.ResourceExistsError","title":"ResourceExistsError","text":"<pre><code>ResourceExistsError(status_code, message, reason, url)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, status_code, message, reason, url):\n    super().__init__(status_code, message, reason, url)\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.ResourceExistsError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.BroadpeakIoHelperError","title":"BroadpeakIoHelperError","text":"<pre><code>BroadpeakIoHelperError(message, original_message=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, message, original_message=None):\n    self.message = message\n    self.original_message = original_message\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.BroadpeakIoHelperError-attributes","title":"Attributes","text":"message \u00b6 <pre><code>message = message\n</code></pre> <code></code> original_message \u00b6 <pre><code>original_message = original_message\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.InvalidApiKeyFormat","title":"InvalidApiKeyFormat","text":"<pre><code>InvalidApiKeyFormat(reason)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, reason):\n    super().__init__(\n        403, \"The API Key provided has an invalid format\", reason, None\n    )\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.InvalidApiKeyFormat-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.InvalidEndpointError","title":"InvalidEndpointError","text":"<pre><code>InvalidEndpointError(message, original_message=None)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, message, original_message=None):\n    self.message = message\n    self.original_message = original_message\n    super().__init__(message=message, reason=original_message, url=None, status_code=403)\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.InvalidEndpointError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> original_message \u00b6 <pre><code>original_message = original_message\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.BroadpeakIoSdkError","title":"BroadpeakIoSdkError","text":"<pre><code>BroadpeakIoSdkError(message)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, message):\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/#bpkio_api.exceptions.BroadpeakIoSdkError-attributes","title":"Attributes","text":"message \u00b6 <pre><code>message = message\n</code></pre>"},{"location":"api/utils/#response-handler","title":"Response Handler","text":"<p>Handles API responses and error processing:</p>"},{"location":"api/utils/#bpkio_api.response_handler","title":"bpkio_api.response_handler","text":""},{"location":"api/utils/#bpkio_api.response_handler-functions","title":"Functions","text":""},{"location":"api/utils/#bpkio_api.response_handler.postprocess_response","title":"postprocess_response","text":"<pre><code>postprocess_response(response)\n</code></pre> <p>Checks whether or not the response was successful.</p> Source code in <code>bpkio_api/response_handler.py</code> <pre><code>def postprocess_response(response):\n    \"\"\"Checks whether or not the response was successful.\"\"\"\n\n    headers = response.request.headers\n    body = response.request.body\n    if \"Authorization\" in headers:\n        auth = headers.get(\"Authorization\")\n        headers[\"Authorization\"] = auth[0:10] + \"*****\" + auth[-5:]\n\n    logger.debug(response.request.method + \" \" + response.request.url)\n    logger.debug(f\"headers: {headers}\")\n    logger.debug(f\"body: {body}\")\n    logger.debug(f\"&gt; ({response.status_code}) -&gt; {response.text}\")\n\n    # Record into the session\n    SessionRecorder.record(response)\n\n    if 200 &lt;= response.status_code &lt; 300:\n        # invalidate cache for operations that change lists of resources\n        if response.request.method in (\"PUT\", \"DELETE\", \"POST\"):\n            clear_cache()\n\n        # Pass through the response.\n        return response\n\n    if response.status_code &gt;= 500:\n        raise errors.BroadpeakIoApiError(\n            url=response.url,\n            status_code=response.status_code,\n            message=response.text,\n            reason=response.reason,\n        )\n\n    response_payload = json.loads(response.text)\n\n    if response.status_code == 403:\n        if (\n            \"existing\" in response_payload[\"message\"]\n            or \"with the same\" in response_payload[\"message\"]\n        ):\n            raise errors.ResourceExistsError(\n                url=response.url,\n                status_code=response.status_code,\n                message=response_payload[\"message\"],\n                reason=response.reason,\n            )\n\n        raise errors.AccessForbiddenError(\n            url=response.url,\n            status_code=response.status_code,\n            message=response_payload[\"message\"],\n            reason=response.reason,\n        )\n    else:\n        raise errors.BroadpeakIoApiError(\n            url=response.url,\n            status_code=response.status_code,\n            message=response_payload[\"message\"],\n            reason=response.reason,\n        )\n</code></pre>"},{"location":"api/utils/#bpkio_api.response_handler.extract_count","title":"extract_count","text":"<pre><code>extract_count(response)\n</code></pre> Source code in <code>bpkio_api/response_handler.py</code> <pre><code>def extract_count(response):\n    return int(response.headers[\"x-pagination-total-count\"])\n</code></pre>"},{"location":"api/utils/#bpkio_api.response_handler-modules","title":"Modules","text":""},{"location":"api/utils/#consumer","title":"Consumer","text":"<p>Base consumer class for API interactions:</p>"},{"location":"api/utils/#bpkio_api.consumer","title":"bpkio_api.consumer","text":""},{"location":"api/utils/#bpkio_api.consumer-attributes","title":"Attributes","text":""},{"location":"api/utils/#bpkio_api.consumer-classes","title":"Classes","text":""},{"location":"api/utils/#bpkio_api.consumer.BpkioSdkConsumer","title":"BpkioSdkConsumer","text":"<pre><code>BpkioSdkConsumer(base_url='', verify_ssl=True, **kwargs)\n</code></pre> <p>               Bases: <code>Consumer</code></p> Source code in <code>bpkio_api/consumer.py</code> <pre><code>def __init__(self, base_url=\"\", verify_ssl=True, **kwargs):\n    self.verify_ssl = verify_ssl\n    s = requests.Session()\n    s.verify = verify_ssl\n\n    # Hide warnings about InsecureRequestWarning (from not validating SSL self-signed certificates)\n    if verify_ssl is False:\n        requests.packages.urllib3.disable_warnings()\n\n    super().__init__(base_url, client=s, **kwargs)\n\n    # Set headers for all requests of the instance.\n    client_string = api_client\n    if \"api_client\" in kwargs:\n        self.api_client = kwargs.get(\"api_client\")\n        client_string = kwargs.get(\"api_client\") + \" \" + api_client\n        self.session.headers[\"x-api-client\"] = client_string\n    else:\n        self.api_client = \"\"\n\n    if \"user_agent\" in kwargs:\n        self.user_agent = kwargs.get(\"user_agent\")\n        self.session.headers[\"User-Agent\"] = kwargs.get(\"user_agent\")\n    else:\n        self.user_agent = \"\"\n</code></pre>"},{"location":"api/utils/#bpkio_api.consumer.BpkioSdkConsumer-attributes","title":"Attributes","text":"verify_ssl \u00b6 <pre><code>verify_ssl = verify_ssl\n</code></pre> <code></code> api_client \u00b6 <pre><code>api_client = get('api_client')\n</code></pre> <code></code> user_agent \u00b6 <pre><code>user_agent = get('user_agent')\n</code></pre>"},{"location":"api/utils/caching/","title":"Caching","text":"<p>The Caching module provides functionality to cache API responses, improving performance by reducing unnecessary API calls.</p>"},{"location":"api/utils/caching/#api-reference","title":"API Reference","text":""},{"location":"api/utils/caching/#bpkio_api.caching","title":"bpkio_api.caching","text":""},{"location":"api/utils/caching/#bpkio_api.caching-attributes","title":"Attributes","text":""},{"location":"api/utils/caching/#bpkio_api.caching.CACHE","title":"CACHE","text":"<pre><code>CACHE: Cache | None = None\n</code></pre>"},{"location":"api/utils/caching/#bpkio_api.caching-functions","title":"Functions","text":""},{"location":"api/utils/caching/#bpkio_api.caching.init_cache","title":"init_cache","text":"<pre><code>init_cache(fqdn, tenant_id)\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def init_cache(fqdn, tenant_id):\n    temp_dir = tempfile.gettempdir()\n    cache_dir = os.path.join(temp_dir, \"bpkio_sdk\", str(fqdn), str(tenant_id))\n\n    global CACHE\n    CACHE = diskcache.Cache(cache_dir)\n    logger.debug(\"Cache folder: \" + cache_dir)\n</code></pre>"},{"location":"api/utils/caching/#bpkio_api.caching.cache_api_results","title":"cache_api_results","text":"<pre><code>cache_api_results(key: str, ttl: int = 120)\n</code></pre> <p>Decorator to retrieve and/or store the results of an API helper method into Cache</p> Source code in <code>bpkio_api/caching.py</code> <pre><code>def cache_api_results(key: str, ttl: int = 120):\n    \"\"\"Decorator to retrieve and/or store the results of an API helper method into Cache\"\"\"\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            global CACHE\n            if CACHE is not None and key in CACHE:\n                logger.debug(f\"Cache entry found for '{key}'\")\n                SessionRecorder.record(SessionComment(\"Cache hit\"))\n                return CACHE[key]\n            result = func(*args, **kwargs)\n            if CACHE is not None:\n                CACHE.set(key=key, value=result, expire=ttl)\n                logger.debug(f\"Adding cache entry for '{key}'\")\n            return result\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"api/utils/caching/#bpkio_api.caching.invalidate_cache","title":"invalidate_cache","text":"<pre><code>invalidate_cache(key: str)\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def invalidate_cache(key: str):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            result = func(*args, **kwargs)\n\n            global CACHE\n            if CACHE is not None and key in CACHE:\n                del CACHE[key]\n                logger.debug(\"Cache for '{key}' cleared\")\n            return result\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"api/utils/caching/#bpkio_api.caching.clear_cache_entry","title":"clear_cache_entry","text":"<pre><code>clear_cache_entry(key: str)\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def clear_cache_entry(key: str):\n    global CACHE\n    if CACHE is not None and key in CACHE:\n        del CACHE[key]\n        logger.debug(f\"Cache for '{key}' cleared\")\n</code></pre>"},{"location":"api/utils/caching/#bpkio_api.caching.clear_cache","title":"clear_cache","text":"<pre><code>clear_cache()\n</code></pre> Source code in <code>bpkio_api/caching.py</code> <pre><code>def clear_cache():\n    global CACHE\n    if CACHE is not None:\n        CACHE.clear()\n        logger.debug(\"Cache cleared\")\n</code></pre>"},{"location":"api/utils/caching/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\nfrom bpkio_api.caching import init_cache\n\n# Initialize the cache for a specific tenant\ninit_cache(\"api.broadpeak.io\", \"tenant-id\")\n\n# Use caching with the client\nclient = BroadpeakIoApi(\n    api_key=\"your-api-key\",\n    use_cache=True  # Enable caching (default)\n)\n\n# First call will hit the API\nsources = client.sources.list()\n\n# Second call will use the cache\nsources = client.sources.list()  # Returns cached data\n</code></pre>"},{"location":"api/utils/caching/#cache-configuration","title":"Cache Configuration","text":"<p>The cache is automatically configured when you initialize the <code>BroadpeakIoApi</code> client. You can control caching behavior through the <code>use_cache</code> parameter when creating the client. </p>"},{"location":"api/utils/credential_provider/","title":"Credential Provider","text":"<p>The Credential Provider module handles tenant profiles and API key management in the broadpeak.io SDK.</p>"},{"location":"api/utils/credential_provider/#api-reference","title":"API Reference","text":""},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider","title":"bpkio_api.credential_provider","text":""},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider-attributes","title":"Attributes","text":""},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.DEFAULT_FQDN","title":"DEFAULT_FQDN","text":"<pre><code>DEFAULT_FQDN = 'api.broadpeak.io'\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.DEFAULT_INI_FILE","title":"DEFAULT_INI_FILE","text":"<pre><code>DEFAULT_INI_FILE = join(expanduser('~'), '.bpkio/tenants')\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider-classes","title":"Classes","text":""},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.TenantProfile","title":"TenantProfile","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.TenantProfile-attributes","title":"Attributes","text":"label \u00b6 <pre><code>label: str\n</code></pre> <code></code> id \u00b6 <pre><code>id: int\n</code></pre> <code></code> fqdn \u00b6 <pre><code>fqdn: Optional[str] = DEFAULT_FQDN\n</code></pre> <code></code> api_key \u00b6 <pre><code>api_key: str\n</code></pre> <code></code> credential_source \u00b6 <pre><code>credential_source: str = 'file'\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.TenantProfileProvider","title":"TenantProfileProvider","text":"<pre><code>TenantProfileProvider(filename: Optional[str] = None)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, filename: Optional[str] = None) -&gt; None:\n    f = Path(filename or DEFAULT_INI_FILE)\n    if not f.exists():\n        f.parent.mkdir(exist_ok=True, parents=True)\n        f.touch()\n\n    self._filename = f\n    self._read_ini_file()\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.TenantProfileProvider-attributes","title":"Attributes","text":"config \u00b6 <pre><code>config = ConfigParser()\n</code></pre> <code></code> inifile \u00b6 <pre><code>inifile\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.TenantProfileProvider-functions","title":"Functions","text":"get_tenant_profile \u00b6 <pre><code>get_tenant_profile(tenant_label: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def get_tenant_profile(self, tenant_label: str):\n    tenant_info = self._get_tenant_section(tenant_label)\n\n    tp = TenantProfile(\n        label=tenant_label,\n        api_key=tenant_info.get(\"api_key\"),\n        id=tenant_info.getint(\"id\"),\n        fqdn=tenant_info.get(\"fqdn\", DEFAULT_FQDN),\n    )\n    if \"_cred_source\" in tenant_info:\n        tp.credential_source = tenant_info[\"_cred_source\"]\n    return tp\n</code></pre> <code></code> list_tenants \u00b6 <pre><code>list_tenants()\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def list_tenants(self):\n    tenants = []\n    for section in self.config.sections():\n        tenants.append(\n            TenantProfile(\n                label=section,\n                id=self.config[section].getint(\"id\"),\n                fqdn=self.config[section].get(\"fqdn\", DEFAULT_FQDN),\n                api_key=self.config[section].get(\"api_key\"),\n            )\n        )\n\n    return tenants\n</code></pre> <code></code> has_tenant_label \u00b6 <pre><code>has_tenant_label(tenant: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def has_tenant_label(self, tenant: str):\n    return tenant in self.config\n</code></pre> <code></code> has_default_tenant \u00b6 <pre><code>has_default_tenant()\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def has_default_tenant(self):\n    return self.has_tenant_label(\"default\")\n</code></pre> <code></code> get_tenant_label_from_working_directory \u00b6 <pre><code>get_tenant_label_from_working_directory()\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def get_tenant_label_from_working_directory(self):\n    try:\n        with open(\".tenant\") as f:\n            return f.read().strip()\n    except Exception:\n        return None\n</code></pre> <code></code> store_tenant_label_in_working_directory \u00b6 <pre><code>store_tenant_label_in_working_directory(tenant: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def store_tenant_label_in_working_directory(self, tenant: str):\n    with open(\".tenant\", \"w\") as f:\n        f.write(tenant)\n</code></pre> <code></code> add_tenant \u00b6 <pre><code>add_tenant(key: str, entries: dict)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def add_tenant(self, key: str, entries: dict):\n    self.config[key] = entries\n    with open(self._filename, \"w\") as ini:\n        self.config.write(ini)\n</code></pre> <code></code> replace_tenant_api_key \u00b6 <pre><code>replace_tenant_api_key(key: str, api_key: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def replace_tenant_api_key(self, key: str, api_key: str):\n    self.config[key][\"api_key\"] = api_key\n    with open(self._filename, \"w\") as ini:\n        self.config.write(ini)\n</code></pre> <code></code> remove_tenant \u00b6 <pre><code>remove_tenant(key: str)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def remove_tenant(self, key: str):\n    self.config.remove_section(key)\n    with open(self._filename, \"w\") as ini:\n        self.config.write(ini)\n</code></pre> <code></code> resolve_platform \u00b6 <pre><code>resolve_platform(platform)\n</code></pre> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>@staticmethod\ndef resolve_platform(platform):\n    if platform == \"prod\":\n        return \"api.broadpeak.io\"\n    if platform == \"staging\":\n        return \"apidev.ridgeline.fr\"\n    return platform\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.InvalidTenantError","title":"InvalidTenantError","text":"<pre><code>InvalidTenantError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, message: str) -&gt; None:\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/credential_provider/#bpkio_api.credential_provider.NoTenantSectionError","title":"NoTenantSectionError","text":"<pre><code>NoTenantSectionError(\n    message: str = \"No valid tenant section could be found in the tenant config file\",\n)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, message: str = \"No valid tenant section could be found in the tenant config file\") -&gt; None:\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/credential_provider/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api.credential_provider import TenantProfileProvider\n\n# Create a tenant profile provider\nprovider = TenantProfileProvider()\n\n# Check if there's a default tenant\nif provider.has_default_tenant():\n    # Get the default tenant profile\n    default_tenant = provider.get_tenant_profile(\"default\")\n    print(f\"Default Tenant API Key: {default_tenant.api_key}\")\n\n# Get a specific tenant profile\ntenant = provider.get_tenant_profile(\"my-tenant\")\n</code></pre>"},{"location":"api/utils/exceptions/","title":"Exceptions","text":"<p>The Exceptions module defines custom exceptions used throughout the broadpeak.io SDK for error handling.</p>"},{"location":"api/utils/exceptions/#api-reference","title":"API Reference","text":""},{"location":"api/utils/exceptions/#bpkio_api.exceptions","title":"bpkio_api.exceptions","text":""},{"location":"api/utils/exceptions/#bpkio_api.exceptions-classes","title":"Classes","text":""},{"location":"api/utils/exceptions/#bpkio_api.exceptions.InvalidTenantError","title":"InvalidTenantError","text":"<pre><code>InvalidTenantError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, message: str) -&gt; None:\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.NoTenantSectionError","title":"NoTenantSectionError","text":"<pre><code>NoTenantSectionError(\n    message: str = \"No valid tenant section could be found in the tenant config file\",\n)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/credential_provider.py</code> <pre><code>def __init__(self, message: str = \"No valid tenant section could be found in the tenant config file\") -&gt; None:\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.BroadpeakIoApiError","title":"BroadpeakIoApiError","text":"<pre><code>BroadpeakIoApiError(status_code, message, reason, url)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, status_code, message, reason, url):\n    self.status_code = status_code\n    self.message = message\n    self.reason = reason\n    self.url = url\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.BroadpeakIoApiError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.AccessForbiddenError","title":"AccessForbiddenError","text":"<pre><code>AccessForbiddenError(status_code, message, reason, url)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, status_code, message, reason, url):\n    super().__init__(status_code, message, reason, url)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.AccessForbiddenError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.ResourceExistsError","title":"ResourceExistsError","text":"<pre><code>ResourceExistsError(status_code, message, reason, url)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, status_code, message, reason, url):\n    super().__init__(status_code, message, reason, url)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.ResourceExistsError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.BroadpeakIoHelperError","title":"BroadpeakIoHelperError","text":"<pre><code>BroadpeakIoHelperError(message, original_message=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, message, original_message=None):\n    self.message = message\n    self.original_message = original_message\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.BroadpeakIoHelperError-attributes","title":"Attributes","text":"message \u00b6 <pre><code>message = message\n</code></pre> <code></code> original_message \u00b6 <pre><code>original_message = original_message\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.InvalidApiKeyFormat","title":"InvalidApiKeyFormat","text":"<pre><code>InvalidApiKeyFormat(reason)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, reason):\n    super().__init__(\n        403, \"The API Key provided has an invalid format\", reason, None\n    )\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.InvalidApiKeyFormat-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.InvalidEndpointError","title":"InvalidEndpointError","text":"<pre><code>InvalidEndpointError(message, original_message=None)\n</code></pre> <p>               Bases: <code>BroadpeakIoApiError</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, message, original_message=None):\n    self.message = message\n    self.original_message = original_message\n    super().__init__(message=message, reason=original_message, url=None, status_code=403)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.InvalidEndpointError-attributes","title":"Attributes","text":"status_code \u00b6 <pre><code>status_code = status_code\n</code></pre> <code></code> reason \u00b6 <pre><code>reason = reason\n</code></pre> <code></code> url \u00b6 <pre><code>url = url\n</code></pre> <code></code> message \u00b6 <pre><code>message = message\n</code></pre> <code></code> original_message \u00b6 <pre><code>original_message = original_message\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.BroadpeakIoSdkError","title":"BroadpeakIoSdkError","text":"<pre><code>BroadpeakIoSdkError(message)\n</code></pre> <p>               Bases: <code>Exception</code></p> Source code in <code>bpkio_api/exceptions.py</code> <pre><code>def __init__(self, message):\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"api/utils/exceptions/#bpkio_api.exceptions.BroadpeakIoSdkError-attributes","title":"Attributes","text":"message \u00b6 <pre><code>message = message\n</code></pre>"},{"location":"api/utils/exceptions/#usage-examples","title":"Usage Examples","text":"<pre><code>from bpkio_api import BroadpeakIoApi\nfrom bpkio_api.exceptions import (\n    BroadpeakIoApiError,\n    InvalidApiKeyFormat,\n    InvalidTenantError,\n    InvalidEndpointError\n)\n\ntry:\n    # Initialize with invalid API key\n    client = BroadpeakIoApi(api_key=\"invalid-key\")\n    client.test_access()\nexcept InvalidApiKeyFormat as e:\n    print(f\"Invalid API key format: {e}\")\nexcept BroadpeakIoApiError as e:\n    print(f\"API Error: {e}\")\nexcept InvalidTenantError as e:\n    print(f\"Tenant Error: {e}\")\nexcept InvalidEndpointError as e:\n    print(f\"Endpoint Error: {e}\")\n</code></pre>"},{"location":"api/utils/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":"<ul> <li><code>BroadpeakIoApiError</code>: Base exception for all API-related errors</li> <li><code>InvalidApiKeyFormat</code>: Raised when the API key format is invalid</li> <li><code>InvalidTenantError</code>: Raised when there are issues with tenant configuration</li> <li><code>InvalidEndpointError</code>: Raised when trying to access an invalid or restricted endpoint </li> </ul>"},{"location":"guides/api_mapping/","title":"Mapping with the API","text":"<p>The broadpeak.io Python SDK maps the broadpeak.io API to Python objects and methods.</p> <p>This page describes the principles used to define that mapping.</p>"},{"location":"guides/api_mapping/#endpoint-path","title":"Endpoint path","text":"<p>The bpkio_api object is the main object in the SDK. It provides access to all the resources and operations available in the broadpeak.io platform.</p> <p>It maps all broadpeak.io API endpoint paths to chains of sub-objects. For example, for top-level endpoints, you will do:</p> <pre><code># API: /sources\nsources = client.sources.list()\n\n# API: /services\nservices = client.services.list()\n\n# API: /transcoding-profiles\ntranscoding_profiles = client.transcoding_profiles.list()\n</code></pre> <p>And as you navigate deeper into the API, the same continues to apply:</p> <pre><code># API: /sources/live\nlive_sources = client.sources.live.list()\n\n# API: /services/virtual-channel\nvirtual_channels = client.services.virtual_channel.list()\n</code></pre> <p>Tip</p> <p>The object names follow the Python \"snake_case\" naming conventions. So, dashes (<code>-</code>) are converted to underscores (<code>_</code>). For example, the <code>virtual-channel</code> endpoint is mapped to the <code>virtual_channel</code> sub-object.</p> <p>When a resource identifier has to be passed in the path to get access to sub-resources, you will pass it as a keyword argument to the sub-object:</p> <pre><code># API: /services/virtual-channel/{serviceId}/slots\nvirtual_channel_slots = client.services.virtual_channel.slots.list(service_id='&lt;id-of-the-service&gt;\")\n</code></pre> <p>Tip</p> <p>Here again, the snake_case naming convention is respected, so the <code>serviceId</code> needs to be passed as <code>service_id</code> in the parameter list.</p>"},{"location":"guides/api_mapping/#endpoint-methods","title":"Endpoint methods","text":""},{"location":"guides/api_mapping/#base-methods","title":"Base methods","text":"<p>When working with broadpeak.io resources, the SDK provides a 1:1 mapping of the HTTP methods to Python methods.</p> HTTP Method Description Python Method <code>GET</code> retrieve a list of resources <code>list</code> <code>GET</code> retrieve a single resource <code>retrieve</code> <code>POST</code> create a resource <code>create</code> <code>PUT</code> update a resource <code>update</code> <code>DELETE</code> delete a resource <code>delete</code> <pre><code>api = BroadpeakIoApi()\n\n# List all sources\nsources = api.sources.list()\n\n# Create a new source\nnew_source = LiveSourceIn(name=\"My new source\", url=\"https://example.com/stream.m3u8\")\nnew_source = api.sources.live.create(new_source)\n\n# Get a specific source\nold_source = api.sources.live.retrieve('&lt;id-of-the-source&gt;')\n\n# Delete a source\napi.sources.live.delete(old_source.id)\n</code></pre>"},{"location":"guides/api_mapping/#list","title":"List","text":"<p>Note that the <code>list</code> method does automatically handle pagination, so you don't need to worry about it. If you need to work with the raw pagination data, you can access it via the <code>_get_page</code> method.</p>"},{"location":"guides/api_mapping/#retrieve","title":"Retrieve","text":"<p>To retrieve a particular resource (source or service) with the broadpeak.io API requires knowing the particular type of resource. </p> <p>To make life easier, the SDK does allow you to perform the <code>retrieve</code> method on the top-level resource. The object returned will be the appropriate model.</p> <p><pre><code>source = api.sources.retrieve('&lt;id-of-the-source&gt;')\n</code></pre> is equivalent (assuming that the source is a live source) to:</p> <pre><code>source = api.sources.live.retrieve('&lt;id-of-the-live-source&gt;')\n</code></pre>"},{"location":"guides/api_mapping/#high-order-methods","title":"High-order methods","text":"<p>The SDK also provides high-order methods that can be used to work with resources, providing convenience mechanisms for a number of common operations where multiple API calls are required.</p> Method Description <code>count</code> Count the number of resources <code>search</code> Filter the list of resources matching specific criteria <code>search_by_type</code> Filter the list of resources for a particular type <code>upsert</code> Create, retrieve or update a resource"},{"location":"guides/api_mapping/#search-filter","title":"Search / Filter","text":"<p>The <code>search</code> method can be used to filter the list of resources:</p> <p>It takes the following parameters:</p> <ul> <li><code>value</code>: The value to search for.</li> <li><code>field</code>: The field to search in.</li> <li><code>method</code>: The method to use for the search.<ul> <li><code>STRICT</code>: Strict match.</li> <li><code>STRING_MATCH</code>: Exact string match, but also works with enum values.</li> <li><code>STRING_SUB</code>: Partial string match.</li> </ul> </li> </ul> <pre><code># Search for services with a name containing \"My\"\nsources = api.services.search(\n    value=\"My\", \n    field=\"name\", \n    method=SearchMethod.STRING_SUB)\n\n# Search for sources with a URL containing \"example.com\"\nsources = api.sources.search(\n    value=\"example.com\", \n    field=\"url\", \n    method=SearchMethod.STRING_SUB)\n</code></pre> <p>If you don't define the <code>field</code> parameter, the SDK will look through all the fields of the resource to find a match. And by default, the <code>method</code> will be <code>STRING_SUB</code>.</p> <pre><code># Search for services with any property containing \"foo\"\nservices = api.services.search(value=\"foo\")\n</code></pre> <p>If you need to apply multiple filters, you can do so by passing a list of tuples to the <code>filters</code> parameter.</p> <pre><code># Search for all enabled services with a name containing \"AVOD\"\nservices = api.services.search(filters=[\n    (\"AVOD\", \"name\", SearchMethod.STRING_CONTAINS),\n    (\"enabled\", \"state\", SearchMethod.STRICT)\n])\n</code></pre> <p>Finally, since it's a fairly common operation, the SDK provides a helper method to search for resources by type.</p> <pre><code># Search for all live sources\nlive_sources = api.sources.search_by_type(type=SourceType.LIVE)\n</code></pre>"},{"location":"guides/api_mapping/#upsert","title":"Upsert","text":"<p>The <code>upsert</code> method is a convenience method that can be used to create, retrieve or update a resource, based on its existence in the platform.</p> <ul> <li>If the resource does not exist, it will be created.</li> <li>If the resource exists, the behaviour depends on the <code>if_exists</code> parameter.<ul> <li>If set to <code>error</code>: Raises an error if the resource already exists.</li> <li>If set to <code>retrieve</code>: Retrieves the resource unchanged if it exists.</li> <li>If set to <code>update</code>: Updates the resource if it exists then returns the updated resource.</li> </ul> </li> </ul> <p>Unlike other methods, the <code>upsert</code> method returns a tuple with the resource and the operation performed.</p> <pre><code># Create a new source\nnew_source = LiveSourceIn(name=\"My new source\", url=\"https://example.com/stream.m3u8\")\nnew_source = api.sources.live.upsert(new_source)\n</code></pre> <p>If you want to check which operation was performed, you can use the <code>upsert_status</code> helper.</p> <pre><code>from bpkio_api.helpers.upsert import upsert_status\n\n# Create a new source\nnew_source = LiveSourceIn(name=\"My new source\", url=\"https://example.com/stream.m3u8\")\nnew_source = api.sources.live.upsert(new_source)\n\n# Check which operation was performed\noperation_used = upsert_status.get() # (1)!\n</code></pre> <ol> <li>The <code>upsert_status</code> singleton is a ContextVar, so it needs to be accessed via the <code>get</code> method.</li> </ol> <p>The <code>operation_used</code> will be an enum value from the <code>UpsertOperationType</code> enum.</p> <ul> <li><code>CREATED</code>: The resource was created.</li> <li><code>RETRIEVED</code>: The resource was retrieved.</li> <li><code>UPDATED</code>: The resource was updated.</li> <li><code>ERROR</code>: An error occurred.</li> </ul>"},{"location":"guides/api_mapping/#resource-specific-methods","title":"Resource-specific methods","text":"<p>There are some methods that are specific to a particular resource type. For example, the <code>services</code> resource provides a <code>pause</code> and <code>unpause</code> methods.</p> <pre><code># Pause a service\napi.services.pause('&lt;id-of-the-service&gt;')\n\n# Unpause a service\napi.services.unpause('&lt;id-of-the-service&gt;')\n</code></pre> <p>Check the API reference for the list of resource-specific methods.</p>"},{"location":"guides/api_mapping/#models","title":"Models","text":"<p>The SDK provides a model for each of the resources available in the broadpeak.io API.</p> <p>The list of models can be found in the API reference.</p> <p>Tip</p> <p>The model documentation is automatically generated from the API reference, but it may be easier to refer to the the broadpeak.io API Reference to understand the structure of the resources. Check the <code>GET</code> endpoints for the resource you're interested in.</p> <p>Warning</p> <p>Every attempt is made to ensure that the models are as complete as possible and reflect the latest API changes, but it's always possible that some fields are missing or incorrect.</p>"},{"location":"guides/api_mapping/#returned-values","title":"Returned values","text":"<p>Every method that returns a resource or list of resources will parse the response JSON from the API into the appropriate model.</p> <pre><code># Get a specific source\nsource = api.sources.live.retrieve('&lt;id-of-the-source&gt;')\n\nassert isinstance(source, LiveSource)\nprint(f\"Source Name: {source.name}\")\nprint(f\"Source ID: {source.id}\")\nprint(f\"Source URL: {source.url}\")\n</code></pre>"},{"location":"guides/api_mapping/#method-parameters","title":"Method parameters","text":"<p>The SDK offers great flexibility in how you can work with the resources, in particular when passing them as parameters to methods (such as <code>create</code>, <code>update</code> and <code>upsert</code>).</p>"},{"location":"guides/api_mapping/#as-in-models","title":"as \"In\" models","text":"<p>When creating (<code>POST</code>) or updating (<code>PUT</code>) a resource, specific models are used to represent the resource that is passed as request body. Those models have the suffix <code>In</code> in their name.</p> <p>For example, the <code>AssetSourceIn</code> model is used to create an asset source.</p> <pre><code>new_source = AssetSourceIn(\n    name=\"My new source\", \n    url=\"https://example.com/stream.m3u8\")\n\nnew_source = api.sources.asset.create(new_source) # (1)!    \n</code></pre> <ol> <li>The output will be of type <code>AssetSource</code>, the model that represents the full asset source.</li> </ol> <p>Tip</p> <p>When you use these models, your IDE will be able to provide you with autocompletion for the model attributes.</p>"},{"location":"guides/api_mapping/#as-dictionaries","title":"as dictionaries","text":"<p>Because the SDK's models are Pydantic models, you can instead pass a dictionary to the <code>create</code> method.</p> <pre><code>new_source = {\n    \"name\": \"My new source\", \n    \"url\": \"https://example.com/stream.m3u8\"\n}\n\nnew_source_out = api.sources.asset.create(new_source)\n</code></pre> <p>Tip</p> <p>This may be useful if - for some reason - you need to pass a resource that is not part of the SDK.</p>"},{"location":"guides/api_mapping/#as-full-models","title":"as full models","text":"<p>Another advantage of using Pydantic models (in particular in combination with the way the broadpeak.io API's internal mapping works) is that you can even pass an existing full resource to the <code>create</code> method. This can be useful if you want to update an existing resource, or use a resource as a template to create a new one.</p> <pre><code>existing_source = api.sources.asset.retrieve('&lt;id-of-the-source&gt;')\n\nexisting_source.name = \"My updated source\"\nexisting_source.url = \"https://example.com/stream-updated.m3u8\"\n\nnew_source = api.sources.asset.create(existing_source)\n</code></pre>"},{"location":"guides/authentication/","title":"Authentication Guide","text":"<p>This guide provides detailed information about the various authentication methods available in the broadpeak.io Python SDK.</p>"},{"location":"guides/authentication/#overview","title":"Overview","text":"<p>The broadpeak.io Python SDK supports multiple authentication methods to accommodate different use cases and deployment scenarios. You can authenticate using:</p> <ol> <li>API Keys</li> <li>Environment Variables</li> <li>Tenant profiles defined in a file</li> </ol>"},{"location":"guides/authentication/#authentication-methods","title":"Authentication Methods","text":""},{"location":"guides/authentication/#1-using-api-keys","title":"1. Using API Keys","text":"<p>The most direct way to authenticate is using an API key:</p> <pre><code>api = BroadpeakIoApi(api_key=\"your-api-key\")\n</code></pre> <p>You can create an API key in the broadpeak.io dashboard. For more information, check the broadpeak.io Knowledge Center.</p> <p>If you are using a specific broadpeak.io platform, you will need to specify the specific domain name for that platform.</p> <pre><code>api = BroadpeakIoApi(\n    api_key=\"your-api-key\",\n    fqdn=\"api.broadpeak.io\"  # (1)!\n)\n</code></pre> <ol> <li>Replace with the specific domain name for the platform you are using</li> </ol> <p>Tip</p> <p>You can also provide the URL of the broadpeak.io web app, and the SDK will automatically use the correct API endpoint.</p> <pre><code>api = BroadpeakIoApi(\n    api_key=\"your-api-key\",\n    fqdn=\"https://app.broadpeak.io\"  # (1)!\n)\n</code></pre> <ol> <li>Replace with the specific domain name for the platform you are using</li> </ol>"},{"location":"guides/authentication/#2-using-environment-variables","title":"2. Using Environment Variables","text":"<p>The SDK can automatically pick up credentials from environment variables:</p> <pre><code># Set environment variables before initializing\nexport BPKIO_API_KEY=\"your-api-key\"\nexport BPKIO_FQDN=\"api.broadpeak.io\"  # (1)! \n</code></pre> <ol> <li>Optional, replace with the specific domain name for the platform you are using</li> </ol> <pre><code># Initialize without parameters\napi = BroadpeakIoApi()\n</code></pre>"},{"location":"guides/authentication/#3-using-the-tenants-file","title":"3. Using the <code>tenants</code> file","text":"<p>This option is useful if you have multiple tenants and want to switch between them easily. You can keep credentials for each tenant in a file and simply use the tenant label.</p> <p>To do this, create (or modify) the file in ~/.bpkio/tenants, and add a section within it:</p> <pre><code>[my_tenant]\napi_key = \"your-api-key\"\n</code></pre> <p>Then, you can initialize the SDK with the tenant profile:</p> <pre><code>api = BroadpeakIoApi(tenant=\"my_tenant\")\n</code></pre> <p>Note</p> <p>This file is also used by the <code>bic</code> CLI tool to switch between tenants. So you can also simply add a tenant with the <code>bic config tenant add</code> command, and then use it with the SDK.</p> <p>Warning</p> <p>You cannot specify both a tenant and an API key simultaneously - this will raise an exception.</p> <p>You can also set the <code>BPKIO_TENANT</code> environment variable to the tenant label, and the SDK will use it automatically.</p> <pre><code>export BPKIO_TENANT=\"my_tenant\"\n</code></pre> <pre><code>api = BroadpeakIoApi()\n</code></pre> <p>Finally, as a fallback, you can also define a default tenant in the <code>tenants</code> file, and then use it with the SDK without specifying the tenant label.</p> <pre><code>[default]\napi_key = \"your-api-key\"\n</code></pre> <p>Then, you can initialize the SDK without specifying the tenant label:</p> <pre><code>api = BroadpeakIoApi()\n</code></pre>"},{"location":"guides/authentication/#4-using-a-tenantprofile-object","title":"4. Using a TenantProfile object","text":"<p>For more complex scenarios, you can use a TenantProfile object:</p> <pre><code>from bpkio_api.credential_provider import TenantProfile\n\n# Create a tenant profile\nprofile = TenantProfile(\n    label=\"mytenant\",\n    id=\"your-tenant-id\",\n    api_key=\"your-api-key\",\n    fqdn=\"api.broadpeak.io\"  # (1)!\n)\n\n# Initialize with the tenant profile\napi = BroadpeakIoApi(tenant=profile)\n</code></pre> <ol> <li>Optional, replace with the specific domain name for the platform you are using</li> </ol>"},{"location":"guides/authentication/#order-of-precedence","title":"Order of Precedence","text":"<p>The order of precedence for authentication is:</p> <ol> <li>explicitly provided Tenant Profile (with the <code>tenant</code> parameter)</li> <li>explicitly provided API Key (with the <code>api_key</code> parameter)</li> <li>Environment Variable <code>BPKIO_TENANT</code></li> <li>Environment Variable <code>BPKIO_API_KEY</code></li> <li>Default Tenant Profile from the <code>tenants</code> file</li> </ol>"},{"location":"guides/authentication/#verifying-authentication","title":"Verifying Authentication","text":"<p>After initializing the SDK, you can verify your authentication by getting the current tenant information:</p> <pre><code># Get current tenant information\ntenant = api.get_self_tenant()\nprint(f\"Connected as tenant: {tenant.name}\")\nprint(f\"Tenant ID: {tenant.id}\")\n</code></pre>"},{"location":"guides/authentication/#error-handling","title":"Error Handling","text":"<p>The SDK includes several authentication-related exceptions:</p> <pre><code>from bpkio_api.exceptions import (\n    AccessForbiddenError,\n    InvalidApiKeyFormat,\n    BroadpeakIoHelperError\n)\n\ntry:\n    api = BroadpeakIoApi(api_key=\"invalid-key\")\n    api.sources.list()\nexcept InvalidApiKeyFormat as e:\n    print(\"The API key format is invalid\")\nexcept AccessForbiddenError as e:\n    print(f\"Access forbidden: {e.status_code}\")\nexcept BroadpeakIoHelperError as e:\n    print(\"An error occurred with the API helper\")\n</code></pre>"},{"location":"guides/authentication/#best-practices","title":"Best Practices","text":"<ol> <li>Environment Variables: For production deployments, in particular for automation, using environment variables is recommended as it keeps credentials out of your code.</li> <li>API Keys: Keep your API keys secure and never commit them to version control.</li> <li>Custom FQDN: If you're using a dedicated broadpeak.io platform, make sure to set it during initialization rather than using the default.</li> <li>Error Handling: Always implement proper error handling for authentication-related exceptions.</li> </ol>"},{"location":"guides/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Quickstart Guide for basic usage examples</li> <li>Learn about the available API Endpoints</li> </ul>"},{"location":"guides/installation/","title":"Installation Guide","text":""},{"location":"guides/installation/#using-pip","title":"Using pip","text":"<p>You can also install the package using pip:</p> <pre><code>pip install bpkio-python-sdk\n</code></pre>"},{"location":"guides/installation/#using-poetry","title":"Using Poetry","text":"<pre><code>poetry add bpkio-python-sdk\n</code></pre>"},{"location":"guides/installation/#using-uv","title":"Using uv","text":"<pre><code>uv add bpkio-python-sdk\n</code></pre>"},{"location":"guides/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the broadpeak.io Python SDK.</p> <p>It doesn't take much to work with the SDK, in particular if you're already familiar with the broadpeak.io APIs, and in particular the API reference tool in the Knowledge Center.</p> <pre><code>from bpkio_api import BroadpeakIoApi\n\nclient = BroadpeakIoApi(api_key=\"your-api-key\")\n\n# List all sources\nsources = client.sources.list()\nfor source in sources:\n    print(f\"Source: {source.name}\")\n\n# Get a specific source\nsource = client.sources.retrieve('&lt;id-of-the-source&gt;')\n</code></pre>"},{"location":"guides/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Mapping to understand how the SDK maps the API to Python objects and methods.</li> <li>Learn about other mechanisms for authenticating with the SDK in the Authentication guide.</li> </ul>"}]}